{"version":3,"sources":["main/styles/GlobalStyles.tsx","main/styles/Normalize.tsx","features/layout/LayoutActionType.ts","features/layout/LayoutReducer.ts","main/style.tsx","main/useDispatch.ts","features/authentication/Login/Login.style.tsx","features/authentication/authenticationModel.ts","features/joinedConversations/joinedConversationModel.ts","features/users/userModel.ts","features/authentication/Login/Login.tsx","features/authentication/loginCommand.ts","features/chat/Chat/ChatUI.style.tsx","features/layout/Selectors.ts","features/currentConversation/currentConversationModel.ts","features/conversations/conversationModel.ts","foundations/components/icons/AddIcon.tsx","features/joinedConversations/ConversationItem/ConversationItem.style.tsx","foundations/components/icons/LeaveIcon.tsx","foundations/utilities/getUniqueColor.tsx","foundations/hooks/useMediaQuery.ts","features/joinedConversations/ConversationItem/ConversationItem.tsx","foundations/hooks/useHover.ts","features/joinedConversations/MyConversations/MyConversations.style.tsx","features/conversationMembers/conversationMemberModel.ts","features/memberPresence/memberPresenceModel.ts","foundations/components/UserInitialsAvatar.tsx","features/userDetail/userDetailModel.ts","features/layout/LayoutActions.ts","features/conversationMembers/MemberDescription/MemberDescription.style.tsx","features/conversationMembers/MemberDescription/MemberDescription.tsx","foundations/components/icons/CrossIcon.tsx","features/conversationMembers/ConversationMembers/ConversationMembers.style.tsx","foundations/components/icons/PeopleGroupIcon.tsx","features/currentConversation/ConversationOccupancy/ConversationOccupancy.style.tsx","features/currentConversation/ConversationOccupancy/ConversationOccupancy.tsx","features/currentConversation/Header/Header.style.tsx","foundations/components/icons/BackIcon.tsx","features/currentConversation/Header/Header.tsx","features/conversationMembers/ConversationMembers/ConversationMembers.tsx","features/joinedConversations/MyConversations/MyConversations.tsx","features/joinedConversations/leaveConversationCommand.ts","features/chat/Menu/Menu.style.tsx","foundations/components/icons/LogoIcon.tsx","foundations/components/icons/PresenceIndicatorIcon.tsx","features/currentUser/NetworkStatus/NetworkStatus.style.tsx","features/currentUser/NetworkStatus/NetworkStatus.tsx","features/currentUser/MyUserDetails/MyUserDetails.style.tsx","features/currentUser/MyUserDetails/MyUserDetails.tsx","foundations/components/Branding.tsx","features/messages/messageModel.ts","features/chat/Menu/Menu.tsx","features/currentConversation/CurrentConversation/CurrentConversation.style.tsx","features/currentConversation/MessageListItem/MessageListItem.style.tsx","features/messages/TextMessageDisplay/TextMessageDisplay.style.tsx","features/messages/TextMessageDisplay/TextMessageDisplay.tsx","features/typingIndicator/typingIndicatorModel.ts","features/messages/MessageDisplay/MessageDisplay.tsx","features/currentConversation/MessageListItem/MessageListItem.tsx","foundations/utilities/convertTimestampToTime.tsx","features/currentConversation/MessageList/MessageList.style.tsx","features/currentConversation/MessageList/WelcomeMessage.tsx","features/currentConversation/MessageList/MessageList.tsx","features/joinedConversations/DraftsModel.ts","features/typingIndicator/sendTypingIndicator.ts","foundations/hooks/useClickOutside.ts","foundations/components/icons/FunnyEmojiIcon.tsx","features/emoji/EmojiInput/EmojiInput.style.tsx","features/emoji/EmojiInput/EmojiInput.tsx","features/emoji/EmojiSuggestion/EmojiSuggestion.style.tsx","features/emoji/EmojiSuggestion/EmojiSuggestion.tsx","features/messages/TextMessageEditor/TextMessageEditor.style.tsx","features/messages/draft.ts","foundations/components/icons/SendIcon.tsx","features/messages/TextMessageEditor/TextMessageEditor.tsx","features/messages/MessageEditor/MessageEditor.style.tsx","features/messages/MessageEditor/MessageEditor.tsx","features/currentConversation/MessageInput/MessageInput.style.tsx","features/rtc/RtcCallState.ts","features/currentConversation/MessageInput/MessageInput.tsx","features/messages/sendMessage.ts","features/joinedConversations/discardMessageDraftCommand.ts","features/joinedConversations/updateMessageDraftCommand.ts","features/typingIndicator/TypingIndicatorDisplay/TypingIndicatorDisplay.style.tsx","features/typingIndicator/TypingIndicatorDisplay/TypingIndicatorDisplay.tsx","features/currentConversation/CurrentConversation/CurrentConversation.tsx","features/joinedConversations/ConversationDescription/ConversationDescription.style.tsx","features/joinedConversations/ConversationDescription/ConversationDescription.tsx","features/joinedConversations/JoinConversationDialog/JoinConversationDialog.style.tsx","foundations/components/Modal.tsx","features/joinedConversations/JoinConversationDialog/JoinConversationDialog.tsx","features/joinedConversations/joinConversationCommand.ts","features/userDetail/UserDetailDialog/UserDetailDialog.style.tsx","features/rtc/RtcModel.ts","features/userDetail/UserDetailDialog/UserDetailDialog.tsx","features/rtc/RtcDisplay/RtcDisplay.style.tsx","features/rtc/Rtc.ts","features/rtc/RtcDisplay/RtcDisplay.tsx","features/chat/Chat/Chat.tsx","foundations/utilities/isPubNubConfigured.tsx","main/styles/ErrorBanner.style.tsx","main/Router.tsx","main/Theme.ts","features/currentUser/networkStatusModel.ts","main/rootReducer.ts","main/preloadedState.ts","main/store.ts","main/App.tsx","main/serviceWorker.ts","index.tsx","features/authentication/Login/background.png","features/authentication/Login/logo.svg","features/authentication/Login/screenshot.png"],"names":["GlobalStyles","createGlobalStyle","theme","fonts","app","fontWeights","regular","space","LayoutActionType","View","Normalize","Wrapper","styled","div","useDispatch","OriginalUseDispatch","mediaQueries","medium","image","Body","Promo","radii","strong","large","TagLine","h1","colors","onPrimary","light","Screenshot","Content","backgrounds","panel","content","square","LoginForm","Logo","img","Label","importantText","Field","input","borders","borderLight","Button","button","none","activeText","initialState","isLoggingIn","getAuthenticationStateSlice","state","authentication","getLoggedInUserId","createSelector","authenticationState","invariant","undefined","loggedInUserId","isUserLoggedIn","getConversationsByUserId","joinedConversations","conversations","byId","JoinedConversationsStateReducer","createMembershipReducer","UsersReducer","createUserReducer","getUsersById","users","Login","dispatch","loggingIn","useSelector","loggedIn","useContext","ThemeContext","usersById","useState","userId","setUserId","user","loginWithRandomlyPickedUser","randomUserId","KnownIds","Math","floor","random","length","getState","context","type","pubnub","api","setUUID","isLoginSuccessful","fetchUserById","then","subscribe","channels","withPresence","fetchMemberships","include","spaceFields","customSpaceFields","customFields","totalCount","conversationChannels","map","membership","id","Promise","all","payload","login","custom","tagLine","alt","src","screenshot","logo","readOnly","value","name","toLowerCase","replace","onClick","views","CurrentConversation","viewDisplayed","view","viewHidden","filter","item","getLayoutSlice","layout","getViews","getViewStates","Menu","includes","ConversationMembers","JoinConversation","UserDetail","Rtc","DEFAULT_CONVERSATION","DefaultConversation","conversationId","focusOnConversation","target","currentConversationId","getCurrentConversationId","currentConversation","conversationStateReducer","combineReducers","createSpaceReducer","allConversations","createSpaceListReducer","getConversationsById","getAllConversations","spaces","allSpaces","spaceIds","AddIcon","title","width","height","transform","fill","fillRule","stroke","cx","cy","r","d","strokeLinecap","strokeLinejoin","sizes","emphasized","black","fontSizes","selected","primaryActive","primaryHover","Name","MessageCount","span","IconWrapper","ConversationIcon","selectedText","color","LeaveIcon","getUniqueColor","string","colorSet","modulo","hash","i","charCodeAt","getNumericHash","useMediaQuery","mediaQuery","parsedQuery","match","mediaQueryList","window","matchMedia","matches","setValue","useEffect","mediaQueryListener","addListener","removeListener","ConversationItem","onLeave","unreadMessageCount","mouseEnterTimer","mouseOutTimer","mouseEnterDelayMS","mouseLeaveDelayMS","isHovering","setIsHovering","onMouseEnter","clearTimeout","setTimeout","onMouseLeave","useHover","hoverProps","canLeave","isTouch","touch","avatars","e","stopPropagation","ConversationList","Title","AddButton","getUsersByConversationId","conversationMembers","ConversationMembersStateReducer","createMembersReducer","MemberPresenceReducer","createPresenceReducer","getPresenceByConversationId","memberPresence","presence","round","props","size","avatarText","UserInitialsAvatar","muted","initials","uniqueColor","selectUser","selectedUserId","getSelectedUserId","userDetail","userDetailViewDisplayed","USER_DETAIL_VIEW_DISPLAYED","rtcViewDisplayed","RTC_VIEW_DISPLAYED","menuViewHidden","MENU_VIEW_HIDDEN","joinConversationViewHidden","JOIN_CONVERSATION_VIEW_HIDDEN","conversationMembersViewHidden","CONVERSATION_MEMBERS_VIEW_HIDDEN","panelHover","PresenceDot","success","inactive","Avatar","About","UserName","UserTitle","normalText","MemberDescription","you","CrossIcon","strokeWidth","motion","section","Controls","Header","Details","Channel","CloseIcon","ScrollableView","getAnimatedWrapperVariants","isMedium","open","x","display","closed","transitionEnd","PeopleGroupIcon","active","highlighted","OccupancyNumber","getCurrentConversationOccupancy","conversationMemberships","conversationPresence","members","joinedCount","presentCount","occupancy","ConversationOccupancy","isConversationMembersLayoutVisible","CONVERSATION_MEMBERS_VIEW_DISPLAYED","BackIconWrapper","Border","neutral","Information","Description","BackIcon","getCurrentConversationDescription","conversation","MENU_VIEW_DISPLAYED","description","getCurrentConversationMembers","occupants","occupant","uuid","usePubNub","conversationColor","fetchMembers","spaceId","userFields","customUserFields","fetchHereNow","animate","variants","transition","ease","duration","sort","userA","userB","orderByPresence","key","getJoinedConversations","userConversations","MyConversations","currentUserId","conversationsById","fetchSpaces","JOIN_CONVERSATION_VIEW_DISPLAYED","resolve","leaveSpaces","unsubscribe","CURRENT_CONVERSATION_VIEW_DISPLAYED","primary","LogoIcon","viewBox","y","rx","PresenceIndicatorIcon","NetworkStatus","isConnected","networkStatus","MyUserDetails","MessageType","CompanyName","Branding","companyName","useRef","ref","animatedWrapperVariants","contentHover","small","message","messageText","SenderName","showDetails","TimeSent","shadows","TextMessageDisplay","text","TypingIndicatorType","TypingIndicatorActionType","MessageStateReducer","createMessageReducer","getMessagesById","messages","MessageDisplay","Text","MessageListItem","messageFragment","avatar","sender","hasSender","ts","date","Date","parseInt","minutes","getMinutes","getHours","convertTimestampToTime","timetoken","WelcomeMessage","welcomeMessage","senderId","split","token","charAt","toUpperCase","slice","join","welcome","getCurrentConversationMessages","Object","values","channel","String","MessageList","conversationsScrollPositions","setConversationsScrollPositions","memoizedRestoreConversationScrollPositionCallback","useCallback","conversationScrollPosition","wrapper","current","scrollTo","document","createElement","el","scrollToBottom","scrollTop","scrollHeight","clientHeight","hasReachedBottom","onScroll","scrollPosition","updateCurrentConversationScrollPosition","messageDraftById","getMessageDrafts","drafts","sendTypingIndicator","typingIndicatorType","sendSignal","isTarget","event","contains","useClickOutside","onclick","handleClick","click","condition","reduce","conditionAlreadyMet","addEventListener","removeEventListener","FunnyEmojiIcon","Dialog","EmojiButton","EmojiInput","onSelection","showPicker","setPickerState","picker","dismissPicker","emoji","native","onSelect","darkMode","dark","Popup","Suggestions","Heading","EmojiSearchTerm","bold","Results","Result","Emoji","Colons","EmojiSuggestion","suggestions","displayed","emojiSearchTerm","search","colons","emojiIndex","emojis","results","getEmojiSearchTerm","getEmojisFromEmojiSearchTerm","txt","replaceEmoji","Container","TextArea","textarea","messageTextInput","SendButton","isDraftModified","SendIcon","strokeMiterlimit","autoExpand","style","cssText","newTextDraft","draft","newText","TextMessageEditor","sendDraft","updateDraft","textareaRef","emojiInserted","messageWithEmoji","focus","rows","onChange","onKeyPress","shiftKey","preventDefault","placeholder","messageEditor","borderDark","MessageEditor","RtcCallState","signalReducer","createSignalReducer","defaultState","removeTypingIndicator","newState","signal","publisher","getTypingIndicatorsById","typingIndicators","typingIndicatorRemovedAll","REMOVE_TYPING_INDICATOR_ALL","createTypingIndicatorsListener","ShowTypingIndicator","REMOVE_TYPING_INDICATOR","typingIndicatorRemoved","TYPING_INDICATOR_DURATION_SECONDS","HideTypingIndicator","action","PresenceCategory","LEAVE","TIMEOUT","getConversationMessageDraft","MessageInput","storedDraft","defaultDraft","appMessage","sendPubnubMessage","sendMessage","discardMessageDraft","newDraft","updateMessageDraft","getCurrentConversationTypingIndicators","typingIndicator","grouped","now","TypingIndicatorDisplay","ConversationDescription","ScrollView","CloseButton","Overlay","Modal","getAnimatedModalVariants","getJoinableConversations","conv","JoinConversationDialog","joinSpaces","joinConversation","Call","currentCall","callState","NONE","peerUserId","startTime","lastIncomingCall","callLog","callConnected","status","callCompleted","endTime","getRtcStateSlice","rtc","getCurrentCall","getLastIncommingCall","UserDetailDialog","presenceByConversationId","userName","present","USER_DETAIL_VIEW_HIDDEN","getTime","VideoWrapper","peerConnection","ICE_CONFIG","RtcSettings","rtcIceConfig","rtcDialingTimeoutSeconds","pendingIceCandidates","offerPart1","answerPart1","getLastCallMessage","userMessages","pubnubIceListener","RtcDisplay","video","setVideo","audio","setAudio","dialed","setDialed","setAnswered","peerAnswered","setPeerAnswered","lastIncommingCall","lastCallMessage","myId","a","candidate","addIceCandidate","sdpMid","sdpMLineIndex","console","log","connectionState","push","offer1","offer2","initPeerConnection","offer","sdp","setRemoteDescription","navigator","mediaDevices","getUserMedia","stream","getTracks","forEach","track","addTrack","createAnswer","offerToReceiveVideo","offerToReceiveAudio","answer","setLocalDescription","sendAnswer","answer1","answer2","iceConfig","RTCPeerConnection","bundlePolicy","rtcpMuxPolicy","iceServers","onicegatheringstatechange","oniceconnectionstatechange","onconnectionstatechange","onsignalingstatechange","onicecandidate","publish","sendByPost","ontrack","querySelector","srcObject","streams","onnegotiationneeded","createOffer","localDescription","toJSON","sendOffer","halfLength","part1","part2","disableMedia","stop","enableVideo","mediaConstraints","enableAudio","updateMedia","callUser","DIALING","incomingCall","outgoingCallAccepted","OUTGOING_CALL_CONNECTED","callEnded","closeMedia","close","INCOMING_CALL_CONNECTED","OUTGOING_CALL_COMPLETED","INCOMING_CALL_COMPLETED","RTC_VIEW_HIDDEN","isDialing","RECEIVING_CALL","autoPlay","playsInline","ChatUI","isPubNubConfigured","keyConfiguration","publishKey","subscribeKey","ErrorBanner","error","ErrorBannerComponent","ApplicationRouter","breakpoints","fontSizesAliases","fontWeightsAliases","colorAliases","radiiAliases","borderWidths","borderStyles","bordersAliases","appTheme","NetworkStatusReducer","createNetworkStatusReducer","rootReducer","CURRENT_CONVERSATION_VIEW_HIDDEN","SignalActionType","SIGNAL_RECEIVED","MessageActionType","MESSAGE_RECEIVED","newCall","missed","ACCEPTED","rejected","MISSED_CALL","CALL_NOT_ANSWERED","notAnswered","completed","preloadedState","composeEnhancers","compose","pubnubConfig","assign","restore","heartbeatInterval","Pubnub","store","thunkContext","storeEnhancer","applyMiddleware","ReduxThunk","withExtraArgument","createStore","createAppStore","leaveApplication","unsubscribeAll","App","createPubNubListener","client","Boolean","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cb9e5632.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport { Theme } from \"../Theme\";\n\nconst GlobalStyles = createGlobalStyle<{ theme: Theme }>`\n body {\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  margin: ${({ theme }) => theme.space[0]};\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n* {\n  box-sizing: border-box;\n}\nbody,\nhtml,\n#root {\n  height: 100%;\n}\n`;\n\nexport default GlobalStyles;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst Normalize = createGlobalStyle`\n\n//! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css\nhtml{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n//# sourceMappingURL=normalize.min.css.map\n      \n`;\n\nexport default Normalize;\n","export enum LayoutActionType {\n  MENU_VIEW_DISPLAYED = \"pubnub/MENU_VIEW_DISPLAYED\",\n  MENU_VIEW_HIDDEN = \"pubnub/MENU_VIEW_HIDDEN\",\n  CURRENT_CONVERSATION_VIEW_DISPLAYED = \"pubnub/CURRENT_CONVERSATION_VIEW_DISPLAYED\",\n  CURRENT_CONVERSATION_VIEW_HIDDEN = \"pubnub/CURRENT_CONVERSATION_VIEW_HIDDEN\",\n  CONVERSATION_MEMBERS_VIEW_DISPLAYED = \"pubnub/CONVERSATION_MEMBERS_VIEW_DISPLAYED\",\n  CONVERSATION_MEMBERS_VIEW_HIDDEN = \"pubnub/CONVERSATION_MEMBERS_VIEW_HIDDEN\",\n  JOIN_CONVERSATION_VIEW_DISPLAYED = \"pubnub/JOIN_CONVERSATION_VIEW_DISPLAYED\",\n  JOIN_CONVERSATION_VIEW_HIDDEN = \"pubnub/JOIN_CONVERSATION_VIEW_HIDDEN\",\n  USER_DETAIL_VIEW_DISPLAYED = \"pubnub/USER_DETAIL_VIEW_DISPLAYED\",\n  USER_DETAIL_VIEW_HIDDEN = \"pubnub/USER_DETAIL_VIEW_HIDDEN\",\n  RTC_VIEW_DISPLAYED = \"pubnub/RTC_VIEW_DISPLAYED\",\n  RTC_VIEW_HIDDEN = \"pubnub/RTC_VIEW_HIDDEN\"\n}\n","import { LayoutActions } from \"./LayoutActions\";\nimport { LayoutActionType } from \"./LayoutActionType\";\n\nexport enum View {\n  Menu,\n  CurrentConversation,\n  ConversationMembers,\n  JoinConversation,\n  UserDetail,\n  Rtc\n}\n\ninterface LayoutState {\n  views: View[];\n}\n\nconst initialState: LayoutState = {\n  views: [View.CurrentConversation]\n};\n\nconst viewDisplayed = (state: LayoutState, view: View): LayoutState => {\n  return { ...state, views: [...state.views, view] };\n};\n\nconst viewHidden = (state: LayoutState, view: View): LayoutState => {\n  return { ...state, views: state.views.filter(item => item !== view) };\n};\n\nconst LayoutStateReducer = (\n  state: LayoutState = initialState,\n  action: LayoutActions\n): LayoutState => {\n  switch (action.type) {\n    case LayoutActionType.MENU_VIEW_DISPLAYED:\n      return viewDisplayed(state, View.Menu);\n    case LayoutActionType.MENU_VIEW_HIDDEN:\n      return viewHidden(state, View.Menu);\n    case LayoutActionType.CURRENT_CONVERSATION_VIEW_DISPLAYED:\n      return viewDisplayed(state, View.CurrentConversation);\n    case LayoutActionType.CURRENT_CONVERSATION_VIEW_HIDDEN:\n      return viewHidden(state, View.CurrentConversation);\n    case LayoutActionType.CONVERSATION_MEMBERS_VIEW_DISPLAYED:\n      return viewDisplayed(state, View.ConversationMembers);\n    case LayoutActionType.CONVERSATION_MEMBERS_VIEW_HIDDEN:\n      return viewHidden(state, View.ConversationMembers);\n    case LayoutActionType.JOIN_CONVERSATION_VIEW_DISPLAYED:\n      return viewDisplayed(state, View.JoinConversation);\n    case LayoutActionType.JOIN_CONVERSATION_VIEW_HIDDEN:\n      return viewHidden(state, View.JoinConversation);\n    case LayoutActionType.USER_DETAIL_VIEW_DISPLAYED:\n      return viewDisplayed(state, View.UserDetail);\n    case LayoutActionType.USER_DETAIL_VIEW_HIDDEN:\n      return viewHidden(state, View.UserDetail);\n    case LayoutActionType.RTC_VIEW_DISPLAYED:\n      return viewDisplayed(state, View.Rtc);\n    case LayoutActionType.RTC_VIEW_HIDDEN:\n      return viewHidden(state, View.Rtc);\n  }\n  return state;\n};\n\nexport { LayoutStateReducer };\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  text-align: left;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`;\n","import { useDispatch as OriginalUseDispatch } from \"react-redux\";\nimport { AppDispatch } from \"./storeTypes\";\n\n// Redefine useDispatch to only allow dispatching actions this\n// application's store expects to receive;\n// Fixes a Bug in react-redux 7.1.1 return value that will not\n// allow chaining promises.\n\nconst useDispatch: () => AppDispatch = OriginalUseDispatch;\n\nexport { useDispatch };\n","import styled from \"styled-components/macro\";\nimport image from \"./background.png\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.medium} {\n    background: url(${image});\n    background-size: cover;\n    background-position: center center;\n    padding: 10% 15%;\n  }\n`;\n\nexport const Body = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Promo = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  background: linear-gradient(\n    180deg,\n    rgba(240, 42, 42, 0.670214) 0%,\n    rgba(138, 42, 225, 0.55153) 100%\n  );\n  max-width: 360px;\n  border-top-left-radius: ${({ theme }) => theme.radii.strong};\n  border-bottom-left-radius: ${({ theme }) => theme.radii.strong};\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.large} {\n    display: flex;\n  }\n`;\n\nexport const TagLine = styled.h1`\n  color: ${({ theme }) => theme.colors.onPrimary};\n  font-size: 24px;\n  font-weight: ${({ theme }) => theme.fontWeights.light};\n  margin: 0px;\n  text-align: center;\n  padding: 20px 50px;\n`;\n\nexport const Screenshot = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Content = styled.div`\n  background: ${({ theme }) => theme.backgrounds.panel};\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top-right-radius: ${({ theme }) => theme.radii.strong};\n  border-bottom-right-radius: ${({ theme }) => theme.radii.strong};\n  border-top-left-radius: ${({ theme }) => theme.radii.strong};\n  border-bottom-left-radius: ${({ theme }) => theme.radii.strong};\n  background: ${({ theme }) => theme.backgrounds.content};\n\n  ${({ theme }) => theme.mediaQueries.large} {\n    border-top-left-radius: ${({ theme }) => theme.radii.square};\n    border-bottom-left-radius: ${({ theme }) => theme.radii.square};\n  }\n`;\n\nexport const LoginForm = styled.div`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  font-size: 14px;\n  font-family: ${({ theme }) => theme.fonts.app};\n`;\n\nexport const Logo = styled.img`\n  height: 30px;\n`;\n\nexport const Label = styled.div`\n  color: ${({ theme }) => theme.colors.importantText};\n  padding-bottom: ${({ theme }) => theme.space[1]};\n  padding-top: ${({ theme }) => theme.space[6]};\n`;\n\nexport const Field = styled.input`\n  height: 42px;\n  color: ${({ theme }) => theme.colors.importantText};\n  border-radius: ${({ theme }) => theme.radii.light};\n  border: ${({ theme }) =>\n    `${theme.borders.light} ${theme.colors.borderLight}`};\n  padding: ${({ theme }) => `0 ${theme.space[3]}`};\n  background: ${({ theme }) => theme.backgrounds.content};\n\n  &[type=\"password\"] {\n    letter-spacing: 8px;\n    font-size: 24px;\n  }\n\n  :read-only:focus {\n    outline: none;\n  }\n`;\n\nexport const Button = styled.button`\n  align-self: center;\n  cursor: pointer;\n  border-radius: ${({ theme }) => theme.radii.light};\n  border: ${({ theme }) => theme.borders.none};\n  margin-top: ${({ theme }) => theme.space[8]};\n  padding: ${({ theme }) => `${theme.space[3]} ${theme.space[0]}`};\n  width: 100%;\n  height: 42px;\n  color: ${({ theme }) => theme.colors.activeText};\n  background: linear-gradient(155deg, #e12a66 0%, #5c0ce1 100%);\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  &:focus {\n    outline: none;\n  }\n`;\n","import { createSelector } from \"reselect\";\nimport invariant from \"invariant\";\nimport { AppState } from \"main/storeTypes\";\nimport { AppActions } from \"main/AppActions\";\n\nexport const LOGGING_IN = \"LOGGIN_IN\";\nexport const LOGIN_SUCCEEDED = \"LOGIN_SUCCEEDED\";\n\nexport interface logingInAction {\n  type: typeof LOGGING_IN;\n}\n\nexport const loggingIn = (): logingInAction => ({\n  type: LOGGING_IN\n});\n\ntype loginSucceededPayloadType = {\n  loggedInUserId?: string;\n};\n\nexport interface loginSucceededAction {\n  type: typeof LOGIN_SUCCEEDED;\n  payload: loginSucceededPayloadType;\n}\n\nexport const loginSucceeded = (\n  loginSucceededPayload: loginSucceededPayloadType\n): loginSucceededAction => ({\n  type: LOGIN_SUCCEEDED,\n  payload: loginSucceededPayload\n});\n\nexport interface AuthenticationState {\n  isLoggingIn: boolean;\n  loggedInUserId?: string;\n}\n\nconst initialState: AuthenticationState = {\n  isLoggingIn: false\n};\n\nconst AuthenticationStateReducer = (\n  state: AuthenticationState = initialState,\n  action: AppActions\n): AuthenticationState => {\n  switch (action.type) {\n    case LOGGING_IN: {\n      return { ...state, isLoggingIn: true };\n    }\n    case LOGIN_SUCCEEDED: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        loggedInUserId: action.payload.loggedInUserId\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst getAuthenticationStateSlice = (state: AppState) => state.authentication;\n\nexport const getLoggedInUserId = createSelector(\n  [getAuthenticationStateSlice],\n  (authenticationState: AuthenticationState): string => {\n    invariant(\n      authenticationState.loggedInUserId !== undefined,\n      \"getLoggedInUserId should not be used in components of the application that are rendered while there is no logged in user\"\n    );\n    return authenticationState.loggedInUserId;\n  }\n);\n\nexport const isUserLoggedIn = createSelector(\n  getAuthenticationStateSlice,\n  (authenticationState: AuthenticationState): boolean => {\n    return !!authenticationState.loggedInUserId;\n  }\n);\n\nexport const isLoggingIn = createSelector(\n  getAuthenticationStateSlice,\n  (authenticationState: AuthenticationState): boolean => {\n    return authenticationState.isLoggingIn;\n  }\n);\n\nexport { AuthenticationStateReducer };\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createMembershipReducer } from \"pubnub-redux\";\n\nexport type MembershipHash = { [id: string]: { id: string }[] };\n\nexport interface MemberConversations {\n  [userId: string]: string[];\n}\n\nconst getByUserIdSlice = (state: AppState) => state.joinedConversations;\n\nexport const getConversationsByUserId = createSelector(\n  [getByUserIdSlice],\n  conversations => {\n    return conversations.byId;\n  }\n);\n\nconst JoinedConversationsStateReducer = createMembershipReducer();\nexport { JoinedConversationsStateReducer };\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createUserReducer, User as PubNubUser } from \"pubnub-redux\";\n\n/**\n * This application uses a custom field called title, which must be defined for\n * every user\n */\ninterface CustomUserFields {\n  title: string;\n}\n\n/**\n * Define which fields of PubNub's User object is accessed by this application.\n * Fields not specified in this definition are not used.\n * We use this oportunity to indicate that some fields which are optional in\n * the PubNub object definition are NOT optional in this application.\n */\nexport type User = Required<Pick<PubNubUser, \"id\" | \"name\" | \"profileUrl\">> & {\n  custom: CustomUserFields;\n};\n\n/**\n * Describes a way to lookup a user from a userId\n */\nexport type UsersIndexedById = { [id: string]: User };\n\n/**\n * create a reducer which holds all known user objects in a normalized form\n */\nconst UsersReducer = createUserReducer<User>();\nexport { UsersReducer };\n\n/**\n * Slice selector is used internally to access the state of the reducer\n */\nconst getUsersSlice = (state: AppState) => state.users;\n\n/**\n * Returns an index which can be used to find user objects\n */\nexport const getUsersById = createSelector(\n  [getUsersSlice],\n  (users): UsersIndexedById => {\n    return users.byId;\n  }\n);\n","import React, { useState, useContext } from \"react\";\nimport { useDispatch } from \"main/useDispatch\";\nimport {\n  Wrapper,\n  Button,\n  Promo,\n  TagLine,\n  Screenshot,\n  Content,\n  LoginForm,\n  Logo,\n  Label,\n  Field,\n  Body\n} from \"./Login.style\";\nimport logo from \"./logo.svg\";\nimport { login } from \"../loginCommand\";\nimport { isLoggingIn } from \"../authenticationModel\";\nimport { isUserLoggedIn } from \"features/authentication/authenticationModel\";\nimport { useSelector } from \"react-redux\";\nimport KnownIds from \"config/knownUserIds.json\";\nimport screenshot from \"./screenshot.png\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { ThemeContext } from \"styled-components\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const loggingIn = useSelector(isLoggingIn);\n  const loggedIn = useSelector(isUserLoggedIn);\n  const theme = useContext(ThemeContext);\n  // show the username in the email field\n  const usersById = useSelector(getUsersById);\n  const [userId, setUserId] = useState(\"\");\n  const user = usersById[userId];\n\n  const loginWithRandomlyPickedUser = () => {\n    if (loggingIn || loggedIn || userId !== \"\") {\n      return;\n    }\n    const randomUserId = KnownIds[Math.floor(Math.random() * KnownIds.length)];\n    setUserId(randomUserId);\n    dispatch(login(randomUserId));\n  };\n\n  if (!loggedIn && !loggingIn) {\n    loginWithRandomlyPickedUser();\n  }\n\n  return (\n    <Wrapper>\n      <Body>\n        <Promo>\n          <TagLine>{theme.custom.tagLine}</TagLine>\n          <Screenshot>\n            <img alt=\"pubnub chat screenshot\" src={screenshot} />\n          </Screenshot>\n        </Promo>\n        <Content>\n          <LoginForm>\n            <Logo alt=\"PubNub\" src={logo} />\n            <Label>Username</Label>\n            <Field\n              readOnly\n              value={user ? user.name.toLowerCase().replace(\" \", \".\") : \"\"}\n            />\n            <Label>Password</Label>\n            <Field readOnly type=\"password\" value={\"password123\"} />\n            <Button onClick={loginWithRandomlyPickedUser}>\n              {loggingIn ? \"Connecting\" : \"Log In\"}\n            </Button>\n          </LoginForm>\n        </Content>\n      </Body>\n    </Wrapper>\n  );\n};\n\nexport { Login };\n","import { ThunkAction } from \"main/storeTypes\";\nimport { loggingIn, loginSucceeded } from \"./authenticationModel\";\nimport { fetchUserById, fetchMemberships } from \"pubnub-redux\";\nimport { getConversationsByUserId } from \"features/joinedConversations/joinedConversationModel\";\n\nexport const login = (userId: string): ThunkAction<Promise<void>> => {\n  return (dispatch, getState, context) => {\n    dispatch(loggingIn());\n\n    // Show the login screen for a minimum amount of time as a splash screen\n    //const timer = new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Set the UUID of the current user to ensure that presence works correctly\n    context.pubnub.api.setUUID(userId);\n\n    // ensure that the current user exists while also populating the store\n    // with their information.\n    const isLoginSuccessful = dispatch(fetchUserById({ userId }))\n      .then(() => {\n        // Subscribe to the user's channel to receive events involving this user\n        context.pubnub.api.subscribe({\n          channels: [userId],\n          withPresence: true\n        });\n      })\n      .then(() => {\n        return dispatch(\n          // Load the conversations that this user has joined\n          fetchMemberships({\n            userId,\n            include: {\n              spaceFields: true,\n              customSpaceFields: false,\n              customFields: false,\n              totalCount: false\n            }\n          })\n        );\n      })\n      .then(() => {\n        // Subscribe to messages on the user's joined conversations\n        const conversationChannels = getConversationsByUserId(getState())[\n          userId\n        ].map(membership => membership.id);\n\n        context.pubnub.api.subscribe({\n          channels: conversationChannels,\n          withPresence: true\n        });\n      });\n\n    return Promise.all([isLoginSuccessful]).then(() => {\n      dispatch(loginSucceeded({ loggedInUserId: userId }));\n    });\n  };\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  height: 100%;\n`;\n","import { createSelector } from \"reselect\";\nimport { AppState } from \"main/storeTypes\";\nimport { View } from \"./LayoutReducer\";\n\nconst getLayoutSlice = (state: AppState) => state.layout;\n\nexport const getView = createSelector(\n  [getLayoutSlice],\n  (app: ReturnType<typeof getLayoutSlice>) => {\n    return app.views[0];\n  }\n);\n\nexport const getViews = createSelector(\n  [getLayoutSlice],\n  (app: ReturnType<typeof getLayoutSlice>) => {\n    return app.views;\n  }\n);\n\nexport const getViewStates = createSelector(\n  [getViews],\n  (views: ReturnType<typeof getViews>) => {\n    return {\n      Menu: views.includes(View.Menu),\n      ConversationMembers: views.includes(View.ConversationMembers),\n      JoinConversation: views.includes(View.JoinConversation),\n      CurrentConversation: views.includes(View.CurrentConversation),\n      UserDetail: views.includes(View.UserDetail),\n      Rtc: views.includes(View.Rtc)\n    };\n  }\n);\n","import { AppState } from \"main/storeTypes\";\nimport { AppActions } from \"main/AppActions\";\nimport { createSelector } from \"reselect\";\nimport DefaultConversation from \"config/defaultConversation.json\";\n\nexport const FOCUS_ON_CONVERSATION = \"FOCUS_ON_CONVERSATION\";\n\nexport const DEFAULT_CONVERSATION = DefaultConversation.conversationId;\n\nexport interface focusOnConversationAction {\n  type: typeof FOCUS_ON_CONVERSATION;\n  payload: string;\n}\n\nexport const focusOnConversation = (\n  target: string\n): focusOnConversationAction => {\n  return {\n    type: FOCUS_ON_CONVERSATION,\n    payload: target\n  };\n};\n\nexport interface CurrentConversationState {\n  currentConversationId: string;\n}\n\nconst initialState: CurrentConversationState = {\n  currentConversationId: DEFAULT_CONVERSATION\n};\n\nconst currentConversationStateReducer = (\n  state: CurrentConversationState = initialState,\n  action: AppActions\n): CurrentConversationState => {\n  switch (action.type) {\n    case FOCUS_ON_CONVERSATION:\n      return { ...state, currentConversationId: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport { currentConversationStateReducer };\n\nconst getCurrentConversationSlice = (state: AppState) =>\n  state.currentConversation;\n\nexport const getCurrentConversationId = createSelector(\n  [getCurrentConversationSlice],\n  (currentConversation: CurrentConversationState): string => {\n    return currentConversation.currentConversationId;\n  }\n);\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { combineReducers } from \"redux\";\nimport {\n  createSpaceReducer,\n  createSpaceListReducer,\n  Space\n} from \"pubnub-redux\";\n\n/**\n * Define which fields of PubNub's User object is accessed by this application.\n * Fields not specified in this definition are not used.\n * We use this oportunity to indicate that some fields which are optional in\n * the PubNub object definition are NOT optional in this application.\n */\nexport type Conversation = Required<Pick<Space, \"id\" | \"name\" | \"description\">>;\n\n/**\n * Describes a way to lookup a conversation from a conversationId\n */\nexport type ConversationsIndexedById = { [id: string]: Conversation };\n\n/**\n * create a reducer which holds all known conversation objects in a normalized form\n */\nconst conversationStateReducer = combineReducers({\n  conversations: createSpaceReducer<Conversation>(),\n  allConversations: createSpaceListReducer<Conversation>()\n});\nexport { conversationStateReducer };\n\n/**\n * Slice selectors are used internally to access the state of the reducer\n */\nconst getConversationsSlice = (state: AppState) => state.conversations;\nconst getSpacesSlice = (state: AppState) => state.conversations.conversations;\nconst getAllSpacesSlice = (state: AppState) =>\n  state.conversations.allConversations;\n\n/**\n * Returns an index which can be used to find conversation objects\n */\nexport const getConversationsById = createSelector(\n  [getConversationsSlice],\n  (conversations): ConversationsIndexedById => {\n    return conversations.conversations.byId;\n  }\n);\n\n/**\n * Returns an array of all spaces\n */\nexport const getAllConversations = createSelector(\n  [getSpacesSlice, getAllSpacesSlice],\n  (spaces, allSpaces) => {\n    return allSpaces.spaceIds.map(id => spaces.byId[id]);\n  }\n);\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface AddIconProps {\n  title: string;\n}\n\nexport const AddIcon = ({ title }: AddIconProps) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={20} height={20}>\n      <title>{title}</title>\n      <g transform=\"translate(1 1)\" fill=\"none\" fillRule=\"evenodd\">\n        <circle stroke={theme.colors.onPrimary} cx={9} cy={9} r={9} />\n        <path\n          d=\"M5 9h8M9 5v8\"\n          stroke={theme.colors.onPrimary}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </g>\n    </svg>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div<{ selected: boolean; emphasized: boolean }>`\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  height: ${({ theme }) => theme.sizes[2]};\n  padding: ${({ theme }) => `${theme.space[1]} ${theme.space[6]}`};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme, emphasized }) =>\n    emphasized ? theme.fontWeights.black : theme.fontWeights.regular};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  text-transform: capitalize;\n  color: ${({ theme }) => theme.colors.onPrimary};\n  background: ${({ theme, selected }) =>\n    selected ? theme.backgrounds.primaryActive : \"transparent\"};\n  :hover {\n    background: ${({ theme, selected }) =>\n      selected\n        ? theme.backgrounds.primaryActive\n        : theme.backgrounds.primaryHover};\n  }\n`;\n\nexport const Body = styled.div`\n  display: flex;\n`;\n\nexport const Name = styled.div`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: ${({ theme }) => `${theme.space[0]} ${theme.space[6]}`};\n  line-height: ${({ theme }) => theme.sizes[1]};\n`;\n\nexport const MessageCount = styled.span`\n  margin: ${({ theme }) => theme.space[3]};\n  :hover {\n    display: none;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ConversationIcon = styled.div<{ color: string }>`\n  border-radius: ${({ theme }) => theme.radii.medium};\n  width: ${({ theme }) => theme.sizes[1]};\n  height: ${({ theme }) => theme.sizes[1]};\n  line-height: ${({ theme }) => theme.sizes[1]};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  color: ${({ theme }) => theme.colors.selectedText};\n  text-align: center;\n  background: ${({ color }) => color};\n`;\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface LeaveIconProps {\n  title: string;\n  selected: boolean;\n}\n\nexport const LeaveIcon = ({ title, selected }: LeaveIconProps) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={20} height={16}>\n      <title>{title}</title>\n      <g fill={theme.colors.onPrimary} fillRule=\"evenodd\">\n        <path d=\"M10.647 4.854L12.793 7H.5a.499.499 0 100 1h12.293l-2.146 2.145a.5.5 0 00.707.707l3-3a.497.497 0 000-.708l-3-3a.5.5 0 10-.707.71z\" />\n        <path d=\"M19.001 1.5v12c0 .827-.673 1.5-1.5 1.5h-10c-.827 0-1.5-.673-1.5-1.5v-4a.5.5 0 011 0v4a.5.5 0 00.5.5h10a.5.5 0 00.5-.5v-12a.5.5 0 00-.5-.5h-10a.5.5 0 00-.5.5v4a.5.5 0 01-1 0v-4c0-.827.673-1.5 1.5-1.5h10c.827 0 1.5.673 1.5 1.5\" />\n      </g>\n    </svg>\n  );\n};\n","const getUniqueColor = (string: string, colorSet: string[]) => {\n  const getNumericHash = (string: string) => {\n    let hash = 0;\n    if (string.length === 0) return hash;\n    for (let i = 0; i < string.length; i++) {\n      let char = string.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n  };\n  const modulo = colorSet.length;\n  const colorIndex = ((getNumericHash(string) % modulo) + modulo) % modulo;\n  return colorSet[colorIndex];\n};\n\nexport default getUniqueColor;\n","import { useEffect, useState } from \"react\";\n\nexport function useMediaQuery(mediaQuery: string) {\n  // the theme provides media queries with the \"@media screen and\" prefix, which is not supported by window.matchMedia\n  const parsedQuery =\n    (mediaQuery.match(/(\\([\\w\\s-:]+\\))/) || [])[1] || mediaQuery;\n  const mediaQueryList = window.matchMedia(parsedQuery);\n  const [value, setValue] = useState(mediaQueryList.matches);\n\n  useEffect(() => {\n    const mediaQueryListener = () => setValue(mediaQueryList.matches);\n\n    mediaQueryList.addListener(mediaQueryListener);\n\n    return () => mediaQueryList.removeListener(mediaQueryListener);\n  }, [mediaQueryList]);\n\n  return value;\n}\n","import React, { useContext } from \"react\";\nimport {\n  Wrapper,\n  Body,\n  ConversationIcon,\n  Name,\n  MessageCount,\n  IconWrapper\n} from \"./ConversationItem.style\";\nimport { LeaveIcon } from \"foundations/components/icons/LeaveIcon\";\nimport useHover from \"foundations/hooks/useHover\";\nimport { DEFAULT_CONVERSATION } from \"features/currentConversation/currentConversationModel\";\nimport { ThemeContext } from \"styled-components\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\ninterface ConversationItemProps {\n  selected: boolean;\n  id: string;\n  name: string;\n  unreadMessageCount: number;\n  onClick: () => void;\n  onLeave: () => void;\n}\n\n/**\n * Show a single joined conversation\n *\n * Similiar to ConversationDescription but with different style and more functionality\n */\nconst ConversationItem = ({\n  selected,\n  id,\n  name,\n  onClick,\n  onLeave,\n  unreadMessageCount\n}: ConversationItemProps) => {\n  const [isHovering, hoverProps] = useHover({ mouseEnterDelayMS: 0 });\n  const canLeave: boolean = id !== DEFAULT_CONVERSATION;\n  const theme = useContext(ThemeContext);\n  const isTouch = useMediaQuery(theme.mediaQueries.touch);\n  const color = getUniqueColor(\n    name,\n    (theme.colors.avatars as unknown) as string[]\n  );\n  return (\n    <Wrapper\n      {...hoverProps}\n      selected={selected}\n      emphasized={unreadMessageCount > 0}\n      onClick={onClick}\n    >\n      <Body>\n        <ConversationIcon color={color}>#</ConversationIcon>\n        <Name>{name}</Name>\n      </Body>\n      {(isHovering || isTouch) && canLeave ? (\n        <IconWrapper\n          onClick={e => {\n            e.stopPropagation();\n            onLeave();\n          }}\n        >\n          <LeaveIcon title=\"Leave Conversation\" selected={selected} />\n        </IconWrapper>\n      ) : (\n        unreadMessageCount > 0 && (\n          <MessageCount>{unreadMessageCount}</MessageCount>\n        )\n      )}\n    </Wrapper>\n  );\n};\n\nexport { ConversationItem };\n","import { useState } from \"react\";\n\n// https://github.com/andrewbranch/react-use-hover\n\nexport interface UseHoverOptions {\n  mouseEnterDelayMS?: number;\n  mouseLeaveDelayMS?: number;\n}\n\nexport type HoverProps = Pick<\n  React.HTMLAttributes<HTMLElement>,\n  \"onMouseEnter\" | \"onMouseLeave\"\n>;\n\nexport default function useHover({\n  mouseEnterDelayMS = 200,\n  mouseLeaveDelayMS = 0\n}: UseHoverOptions = {}): [boolean, HoverProps] {\n  const [isHovering, setIsHovering] = useState(false);\n  let mouseEnterTimer: number | undefined;\n  let mouseOutTimer: number | undefined;\n  return [\n    isHovering,\n    {\n      onMouseEnter: () => {\n        clearTimeout(mouseOutTimer);\n        mouseEnterTimer = setTimeout(\n          () => setIsHovering(true),\n          mouseEnterDelayMS\n        );\n      },\n      onMouseLeave: () => {\n        clearTimeout(mouseEnterTimer);\n        mouseOutTimer = setTimeout(\n          () => setIsHovering(false),\n          mouseLeaveDelayMS\n        );\n      }\n    }\n  ];\n}\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  margin: ${({ theme }) => theme.space[0]};\n  margin-top: ${({ theme }) => theme.space[1]};\n`;\n\nexport const ConversationList = styled.div`\n  overflow-y: auto;\n  overflow-y: overlay;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Title = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: ${({ theme }) => `${theme.space[1]} ${theme.space[6]}`};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  color: ${({ theme }) => theme.colors.onPrimary};\n`;\n\nexport const AddButton = styled.span`\n  cursor: pointer;\n  font-size: 0px;\n  align-self: center;\n  cursor: pointer;\n`;\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createMembersReducer } from \"pubnub-redux\";\n\nexport type MembershipHash = { [id: string]: { id: string }[] };\n\nexport interface ConversationMembers {\n  [conversationId: string]: string[];\n}\n\nconst getByConversationIdSlice = (state: AppState) => state.conversationMembers;\n\nexport const getUsersByConversationId = createSelector(\n  [getByConversationIdSlice],\n  (users: { byId: MembershipHash }) => {\n    return users.byId;\n  }\n);\n\nconst ConversationMembersStateReducer = createMembersReducer();\n\nexport { ConversationMembersStateReducer };\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createPresenceReducer, Presence } from \"pubnub-redux\";\n\nexport interface ConversationPresence {\n  [conversationId: string]: {\n    name: string;\n    occupants: Presence[];\n    occupancy: number;\n  };\n}\n\n/**\n * Create a reducer to precense information for conversation members\n */\nconst MemberPresenceReducer = createPresenceReducer();\nexport { MemberPresenceReducer };\n\nconst getByPresenceSlice = (state: AppState) => state.memberPresence;\n\nexport const getPresenceByConversationId = createSelector(\n  [getByPresenceSlice],\n  (presence: { byId: ConversationPresence }) => {\n    return presence.byId;\n  }\n);\n","import React, { useContext } from \"react\";\nimport styled, { ThemeContext } from \"styled-components/macro\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\n\nexport const Wrapper = styled.div<{ color: string; size: number }>`\n  vertical-align: middle;\n  border-radius: ${({ theme }) => theme.radii.round};\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  line-height: ${props => props.size}px;\n  font-size: ${props => Math.round(props.size / 3)}px;\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  text-transform: uppercase;\n  text-align: center;\n  color: ${({ theme }) => theme.colors.avatarText};\n  background-color: ${props => props.color};\n`;\n\ntype UserInitialsAvatarProps = {\n  name: string;\n  userId: string;\n  size: number;\n  muted?: boolean;\n  color?: string;\n};\n\nconst UserInitialsAvatar = ({\n  name,\n  userId,\n  size,\n  muted,\n  color\n}: UserInitialsAvatarProps) => {\n  const theme = useContext(ThemeContext);\n  const initials = name.match(/\\b\\w/g) || [];\n  const uniqueColor = getUniqueColor(\n    userId,\n    (theme.colors.avatars as unknown) as string[]\n  );\n  return (\n    <Wrapper size={size} color={color || uniqueColor}>\n      {initials}\n    </Wrapper>\n  );\n};\n\nexport { UserInitialsAvatar };\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { AppActions } from \"../../main/AppActions\";\n\nexport const SELECT_USER = \"SELECT_USER\";\n\nexport const selectUser = (userId: string): userSelectedAction => ({\n  type: SELECT_USER,\n  payload: {\n    selectedUserId: userId\n  }\n});\n\ntype userSelectedPayloadType = {\n  selectedUserId: string;\n};\nexport interface UserDetailState {\n  selectedUserId: string;\n}\n\nexport interface userSelectedAction {\n  type: typeof SELECT_USER;\n  payload: userSelectedPayloadType;\n}\n\nconst initialState: UserDetailState = {\n  selectedUserId: \"\"\n};\n\nconst UserDetailStateReducer = (\n  state: UserDetailState = initialState,\n  action: AppActions\n): UserDetailState => {\n  switch (action.type) {\n    case SELECT_USER: {\n      return { ...state, selectedUserId: action.payload.selectedUserId };\n    }\n    default:\n      return state;\n  }\n};\n\nconst getUserDetailStateSlice = (state: AppState) => state.userDetail;\n\nexport const getSelectedUserId = createSelector(\n  getUserDetailStateSlice,\n  (userDetail: UserDetailState): string => {\n    return userDetail.selectedUserId;\n  }\n);\n\nexport { UserDetailStateReducer };\n","import { LayoutActionType } from \"./LayoutActionType\";\n\nexport interface menuViewHiddenAction {\n  type: typeof LayoutActionType.MENU_VIEW_HIDDEN;\n}\n\nexport interface currentConversationViewHiddenAction {\n  type: typeof LayoutActionType.CURRENT_CONVERSATION_VIEW_HIDDEN;\n}\n\nexport interface conversationMembersViewHiddenAction {\n  type: typeof LayoutActionType.CONVERSATION_MEMBERS_VIEW_HIDDEN;\n}\n\nexport interface joinConversationViewHiddenAction {\n  type: typeof LayoutActionType.JOIN_CONVERSATION_VIEW_HIDDEN;\n}\n\nexport interface menuViewDisplayedAction {\n  type: typeof LayoutActionType.MENU_VIEW_DISPLAYED;\n}\n\nexport interface currentConversationViewDisplayedAction {\n  type: typeof LayoutActionType.CURRENT_CONVERSATION_VIEW_DISPLAYED;\n}\n\nexport interface conversationMembersViewDisplayedAction {\n  type: typeof LayoutActionType.CONVERSATION_MEMBERS_VIEW_DISPLAYED;\n}\n\nexport interface joinConversationViewDisplayedAction {\n  type: typeof LayoutActionType.JOIN_CONVERSATION_VIEW_DISPLAYED;\n}\nexport interface userDetailViewDisplayedAction {\n  type: typeof LayoutActionType.USER_DETAIL_VIEW_DISPLAYED;\n}\nexport interface userDetailViewHiddenAction {\n  type: typeof LayoutActionType.USER_DETAIL_VIEW_HIDDEN;\n}\n\nexport interface rtcViewDisplayedAction {\n  type: typeof LayoutActionType.RTC_VIEW_DISPLAYED;\n}\nexport interface rtcViewHiddenAction {\n  type: typeof LayoutActionType.RTC_VIEW_HIDDEN;\n}\n\nexport type LayoutActions =\n  | menuViewHiddenAction\n  | currentConversationViewHiddenAction\n  | conversationMembersViewHiddenAction\n  | joinConversationViewHiddenAction\n  | menuViewDisplayedAction\n  | currentConversationViewDisplayedAction\n  | conversationMembersViewDisplayedAction\n  | joinConversationViewDisplayedAction\n  | userDetailViewDisplayedAction\n  | userDetailViewHiddenAction\n  | rtcViewDisplayedAction\n  | rtcViewHiddenAction;\n\nexport const menuViewDisplayed = (): menuViewDisplayedAction => {\n  return {\n    type: LayoutActionType.MENU_VIEW_DISPLAYED\n  };\n};\n\nexport const joinConversationViewDisplayed = (): joinConversationViewDisplayedAction => {\n  return {\n    type: LayoutActionType.JOIN_CONVERSATION_VIEW_DISPLAYED\n  };\n};\n\nexport const userDetailViewDisplayed = (): userDetailViewDisplayedAction => {\n  return {\n    type: LayoutActionType.USER_DETAIL_VIEW_DISPLAYED\n  };\n};\n\nexport const rtcViewDisplayed = (): rtcViewDisplayedAction => {\n  return {\n    type: LayoutActionType.RTC_VIEW_DISPLAYED\n  };\n};\n\nexport const currentConversationViewDisplayed = (): currentConversationViewDisplayedAction => {\n  return {\n    type: LayoutActionType.CURRENT_CONVERSATION_VIEW_DISPLAYED\n  };\n};\n\nexport const conversationMembersViewDisplayed = (): conversationMembersViewDisplayedAction => {\n  return {\n    type: LayoutActionType.CONVERSATION_MEMBERS_VIEW_DISPLAYED\n  };\n};\n\nexport const menuViewHidden = (): menuViewHiddenAction => {\n  return {\n    type: LayoutActionType.MENU_VIEW_HIDDEN\n  };\n};\n\nexport const joinConversationViewHidden = (): joinConversationViewHiddenAction => {\n  return {\n    type: LayoutActionType.JOIN_CONVERSATION_VIEW_HIDDEN\n  };\n};\n\nexport const userDetailViewHidden = (): userDetailViewHiddenAction => {\n  return {\n    type: LayoutActionType.USER_DETAIL_VIEW_HIDDEN\n  };\n};\n\nexport const rtcViewHidden = (): rtcViewHiddenAction => {\n  return {\n    type: LayoutActionType.RTC_VIEW_HIDDEN\n  };\n};\n\nexport const currentConversationViewHidden = (): currentConversationViewHiddenAction => {\n  return {\n    type: LayoutActionType.CURRENT_CONVERSATION_VIEW_HIDDEN\n  };\n};\n\nexport const conversationMembersViewHidden = (): conversationMembersViewHiddenAction => {\n  return {\n    type: LayoutActionType.CONVERSATION_MEMBERS_VIEW_HIDDEN\n  };\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: ${({ theme }) => theme.sizes[2]};\n  padding: ${({ theme }) => `${theme.space[0]} ${theme.space[6]}`};\n  :hover {\n    background: ${({ theme }) => theme.backgrounds.panelHover};\n  }\n`;\n\nexport const PresenceDot = styled.div<{ presence: boolean; size: number }>`\n  border-radius: ${({ theme }) => theme.radii.round};\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  top: -${({ size }) => size / 2}px;\n  right: -${({ size }) => size / 2}px;\n  position: absolute;\n  background-color: ${({ theme, presence }) =>\n    presence ? theme.colors.success : theme.colors.inactive};\n  font-size: 0px;\n`;\n\nexport const Avatar = styled.div`\n  width: ${({ theme }) => theme.sizes[1]};\n  height: ${({ theme }) => theme.sizes[1]};\n  position: relative;\n`;\n\nexport const About = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding-left: ${({ theme }) => theme.space[6]};\n  height: ${({ theme }) => theme.sizes[1]};\n`;\n\nexport const UserName = styled.div<{ muted: boolean }>`\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  text-transform: capitalize;\n  color: ${({ theme }) => theme.colors.importantText};\n  cursor: pointer;\n`;\n\nexport const UserTitle = styled.div<{ muted: boolean }>`\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  color: ${({ theme }) => theme.colors.normalText};\n`;\n","import React from \"react\";\nimport { UserInitialsAvatar } from \"foundations/components/UserInitialsAvatar\";\nimport { selectUser } from \"../../userDetail/userDetailModel\";\nimport { useDispatch } from \"react-redux\";\nimport { userDetailViewDisplayed } from \"../../layout/LayoutActions\";\n\nimport {\n  Wrapper,\n  Avatar,\n  About,\n  PresenceDot,\n  UserName,\n  UserTitle\n} from \"./MemberDescription.style\";\n\nexport interface UserFragment {\n  name: string;\n  id: string;\n  custom: {\n    title: string;\n  };\n  profileUrl: string;\n  presence: boolean;\n}\n\ninterface MemberDescriptionProps {\n  user: UserFragment;\n  you: boolean;\n}\n\nconst MemberDescription = ({ user, you }: MemberDescriptionProps) => {\n  const dispatch = useDispatch();\n\n  const openUserDetailsOverlay = () => {\n    dispatch(selectUser(user.id));\n    dispatch(userDetailViewDisplayed());\n  };\n\n  return (\n    <Wrapper>\n      <Avatar>\n        <UserInitialsAvatar\n          size={36}\n          name={user.name}\n          userId={user.id}\n          muted={!user.presence}\n        />\n        {user.presence && <PresenceDot presence={user.presence} size={7} />}\n      </Avatar>\n      <About>\n        <UserName muted={!user.presence} onClick={openUserDetailsOverlay}>\n          {user.name}\n          {you && \" (you)\"}\n        </UserName>\n        <UserTitle muted={!user.presence}>{user.custom.title}</UserTitle>\n      </About>\n    </Wrapper>\n  );\n};\n\nexport { MemberDescription };\n","import React from \"react\";\n\ninterface CrossIconProps {\n  title: string;\n  color: string;\n}\n\nexport const CrossIcon = ({ title, color }: CrossIconProps) => {\n  return (\n    <svg width={16} height={16}>\n      <title>{title}</title>\n      <g\n        stroke={color}\n        strokeWidth={2}\n        fill=\"none\"\n        fillRule=\"evenodd\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <path d=\"M1 1l13.2 13.2M14.2 1L1 14.2\" />\n      </g>\n    </svg>\n  );\n};\n","import styled from \"styled-components/macro\";\nimport { motion } from \"framer-motion\";\n\nexport const Wrapper = styled(motion.section)`\n  display: none;\n  flex-direction: column;\n  position: fixed;\n  z-index: 100;\n  margin-left: ${({ theme }) => theme.space[0]};\n  width: 100%;\n  max-width: none;\n  height: 100%;\n  background: ${({ theme }) => theme.backgrounds.panel};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    position: relative;\n    min-width: ${({ theme }) => theme.sizes[5]};\n    max-width: ${({ theme }) => theme.sizes[5]};\n  }\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  position: absolute;\n  top: 0;\n  min-height: ${({ theme }) => theme.sizes[1]};\n  padding: ${({ theme }) => `${theme.space[6]}`};\n  width: 100%;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n  min-height: ${({ theme }) => theme.sizes[3]};\n  padding: ${({ theme }) => theme.space[6]};\n  padding-bottom: 0;\n  color: ${({ theme }) => theme.colors.importantText};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ConversationIcon = styled.div<{ color: string }>`\n  border-radius: ${({ theme }) => theme.radii.medium};\n  width: ${({ theme }) => theme.sizes[1]};\n  height: ${({ theme }) => theme.sizes[1]};\n  line-height: ${({ theme }) => theme.sizes[1]};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  color: ${({ theme }) => theme.colors.onPrimary};\n  text-align: center;\n  background: ${({ color }) => color};\n`;\n\nexport const Details = styled.div`\n  height: ${({ theme }) => theme.sizes[1]};\n  padding-left: ${({ theme }) => theme.space[6]};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const Channel = styled.div`\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  color: ${({ theme }) => theme.colors.importantText};\n`;\n\nexport const Title = styled.div`\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  color: ${({ theme }) => theme.colors.importantText};\n  padding: ${({ theme }) => `${theme.space[1]} ${theme.space[6]}`};\n`;\n\nexport const CloseIcon = styled.span`\n  cursor: pointer;\n`;\n\nexport const ScrollableView = styled.span`\n  overflow-y: scroll;\n`;\n\nexport const BackIconWrapper = styled.div`\n  cursor: pointer;\n  display: flex;\n  margin-right: ${({ theme }) => theme.space[7]};\n  justify-self: flex-start;\n  ${({ theme }) => theme.mediaQueries.medium} {\n    display: none;\n  }\n`;\n\nexport const getAnimatedWrapperVariants = (\n  isMedium: boolean,\n  size: string\n) => ({\n  open: {\n    x: isMedium ? \"0px\" : \"0%\",\n    display: \"flex\"\n  },\n  closed: {\n    x: isMedium ? size : \"-100%\",\n    transitionEnd: {\n      display: \"none\"\n    }\n  }\n});\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface PeopleGroupIconProp {\n  title: string;\n  active: boolean;\n}\n\nexport const PeopleGroupIcon = ({ title, active }: PeopleGroupIconProp) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={20} height={15}>\n      <title>{title}</title>\n      <g\n        fill={active ? theme.colors.active : theme.colors.normalText}\n        fillRule=\"evenodd\"\n      >\n        <path d=\"M7 13.503a.5.5 0 00.5.497h11a.5.5 0 00.5-.497c-.001-.035-.032-.895-.739-1.734C17.287 10.612 15.468 10 13 10s-4.287.612-5.261 1.768c-.707.84-.738 1.699-.739 1.734M18.5 15h-11c-.827 0-1.5-.673-1.5-1.5 0-.048.011-1.19.924-2.315.525-.646 1.241-1.158 2.128-1.522C10.123 9.223 11.452 9 13 9s2.876.223 3.948.662c.887.364 1.603.876 2.128 1.522.914 1.125.924 2.267.924 2.315 0 .827-.673 1.5-1.5 1.5M13 1c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3m0 7c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4M4.5 15h-3C.673 15 0 14.327 0 13.5c0-.037.008-.927.663-1.8.378-.505.894-.904 1.533-1.188.764-.34 1.708-.512 2.805-.512.179 0 .356.005.527.014a.5.5 0 01-.053.999 9.1 9.1 0 00-.473-.012c-3.894 0-3.997 2.379-4 2.503a.5.5 0 00.5.497h3a.5.5 0 010 1L4.5 15zM5 4c-1.103 0-2 .897-2 2s.897 2 2 2 2-.897 2-2-.897-2-2-2m0 5C3.346 9 2 7.654 2 6s1.346-3 3-3 3 1.346 3 3-1.346 3-3 3\" />\n      </g>\n    </svg>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div<{ highlighted: boolean }>`\n  display: flex;\n  align-items: center;\n  align-self: flex-start;\n  cursor: pointer;\n  flex-direction: column-reverse;\n  margin-left: ${({ theme }) => theme.space[6]};\n  color: ${({ theme, highlighted }) =>\n    highlighted ? theme.colors.active : theme.colors.normalText};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.light};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    flex-direction: row;\n  }\n`;\n\nexport const OccupancyNumber = styled.section`\n  cursor: pointer;\n  margin-right: ${({ theme }) => theme.space[0]};\n  margin-top: ${({ theme }) => theme.space[0]};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    margin-right: ${({ theme }) => theme.space[3]};\n    margin-top: ${({ theme }) => theme.space[0]};\n  }\n  em {\n    font-style: normal;\n    font-family: ${({ theme }) => theme.fonts.app};\n    font-weight: ${({ theme }) => theme.fontWeights.black};\n  }\n`;\n\nexport const IconWrapper = styled.span`\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getCurrentConversationId } from \"../currentConversationModel\";\nimport {\n  getUsersByConversationId,\n  MembershipHash\n} from \"features/conversationMembers/conversationMemberModel\";\nimport {\n  getPresenceByConversationId,\n  ConversationPresence\n} from \"features/memberPresence/memberPresenceModel\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { PeopleGroupIcon } from \"foundations/components/icons/PeopleGroupIcon\";\nimport {\n  Wrapper,\n  OccupancyNumber,\n  IconWrapper\n} from \"./ConversationOccupancy.style\";\nimport {\n  conversationMembersViewDisplayed,\n  conversationMembersViewHidden\n} from \"features/layout/LayoutActions\";\n\nexport interface ConversationOccupancyFragment {\n  joinedCount: number;\n  presentCount: number;\n}\n\nexport const getCurrentConversationOccupancy = createSelector(\n  [\n    getCurrentConversationId,\n    getUsersByConversationId,\n    getPresenceByConversationId\n  ],\n  (\n    currentConversationId: string,\n    conversationMemberships: MembershipHash,\n    conversationPresence: ConversationPresence\n  ): ConversationOccupancyFragment => {\n    const members = conversationMemberships[currentConversationId];\n    const presence = conversationPresence[currentConversationId];\n    return {\n      joinedCount: members ? members.length : 0,\n      presentCount: presence ? presence.occupancy : 0\n    };\n  }\n);\n\nconst ConversationOccupancy = () => {\n  const {\n    joinedCount,\n    presentCount\n  }: ConversationOccupancyFragment = useSelector(\n    getCurrentConversationOccupancy\n  );\n  const views = useSelector(getViewStates);\n  const isConversationMembersLayoutVisible = views.ConversationMembers;\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper\n      highlighted={isConversationMembersLayoutVisible}\n      onClick={() => {\n        isConversationMembersLayoutVisible\n          ? dispatch(conversationMembersViewHidden())\n          : dispatch(conversationMembersViewDisplayed());\n      }}\n    >\n      <OccupancyNumber>\n        <em>{presentCount}</em> | {joinedCount}\n      </OccupancyNumber>\n      <IconWrapper>\n        <PeopleGroupIcon\n          title={\n            isConversationMembersLayoutVisible\n              ? \"Hide members list\"\n              : \"Show convsersation members\"\n          }\n          active={isConversationMembersLayoutVisible}\n        />\n      </IconWrapper>\n    </Wrapper>\n  );\n};\n\nexport { ConversationOccupancy };\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: ${({ theme }) => theme.sizes[3]};\n  justify-content: space-between;\n  background: ${({ theme }) => theme.backgrounds.panel};\n  padding: ${({ theme }) => `${theme.space[7]} ${theme.space[6]}`};\n  padding-bottom: 0px;\n  ${({ theme }) => theme.mediaQueries.medium} {\n    background: transparent;\n  }\n`;\n\nexport const BackIconWrapper = styled.div`\n  cursor: pointer;\n  display: flex;\n  margin-right: ${({ theme }) => theme.space[7]};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    display: none;\n  }\n`;\n\nexport const Body = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: ${({ theme }) => theme.sizes[1]};\n  width: 100%;\n`;\n\nexport const Border = styled.div`\n  display: none;\n  border-bottom: ${({ theme }) =>\n    `${theme.borders.light} ${theme.colors.neutral[2]}`};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    display: inherit;\n  }\n`;\n\nexport const Information = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nexport const Name = styled.div`\n  flex-grow: 1;\n  color: ${({ theme }) => theme.colors.importantText};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  text-transform: capitalize;\n`;\n\nexport const Description = styled.div`\n  flex-grow: 1;\n  color: ${({ theme }) => theme.colors.normalText};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  text-transform: capitalize;\n`;\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface BackIconProps {\n  title: string;\n}\n\nexport const BackIcon = ({ title }: BackIconProps) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={12} height={22}>\n      <title>{title}</title>\n      <path\n        d=\"M3.621 11l7.94-7.94A1.5 1.5 0 009.439.94l-9 9a1.5 1.5 0 000 2.12l9 9a1.5 1.5 0 002.122-2.12L3.62 11z\"\n        fill={theme.colors.active}\n        fillRule=\"nonzero\"\n      />\n    </svg>\n  );\n};\n","import React from \"react\";\nimport { ConversationOccupancy } from \"../ConversationOccupancy\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport {\n  ConversationsIndexedById,\n  getConversationsById\n} from \"features/conversations/conversationModel\";\nimport { getCurrentConversationId } from \"../currentConversationModel\";\nimport {\n  Wrapper,\n  Body,\n  Information,\n  Name,\n  Description,\n  Border,\n  BackIconWrapper\n} from \"./Header.style\";\nimport { BackIcon } from \"foundations/components/icons/BackIcon\";\nimport { menuViewDisplayed } from \"features/layout/LayoutActions\";\n\nexport interface ConversationDescriptionFragment {\n  id: string;\n  name: string;\n  description: string;\n}\n\nexport const getCurrentConversationDescription = createSelector(\n  [getConversationsById, getCurrentConversationId],\n  (\n    conversations: ConversationsIndexedById,\n    currentConversationId: string\n  ): ConversationDescriptionFragment => {\n    return {\n      ...conversations[currentConversationId]\n    };\n  }\n);\n\nconst Header = () => {\n  const conversation: ConversationDescriptionFragment = useSelector(\n    getCurrentConversationDescription\n  );\n\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      <Body>\n        <BackIconWrapper\n          onClick={() => {\n            dispatch(menuViewDisplayed());\n          }}\n        >\n          <BackIcon title=\"back\" />\n        </BackIconWrapper>\n        <Information>\n          <Name>{conversation.name}</Name>\n          <Description>{conversation.description}</Description>\n        </Information>\n        <ConversationOccupancy />\n      </Body>\n      <Border />\n    </Wrapper>\n  );\n};\n\nexport { Header };\n","import React, { useEffect, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { UsersIndexedById, getUsersById } from \"features/users/userModel\";\nimport {\n  getUsersByConversationId,\n  MembershipHash\n} from \"../conversationMemberModel\";\nimport {\n  getPresenceByConversationId,\n  ConversationPresence\n} from \"features/memberPresence/memberPresenceModel\";\nimport { MemberDescription, UserFragment } from \"../MemberDescription\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport {\n  Wrapper,\n  getAnimatedWrapperVariants,\n  CloseIcon,\n  ScrollableView,\n  Header,\n  Controls,\n  ConversationIcon,\n  IconWrapper,\n  Details,\n  Title,\n  Channel\n} from \"./ConversationMembers.style\";\nimport { fetchMembers, fetchHereNow } from \"pubnub-redux\";\nimport { usePubNub } from \"pubnub-react\";\nimport { conversationMembersViewHidden } from \"features/layout/LayoutActions\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\nimport { getCurrentConversationDescription } from \"features/currentConversation/Header\";\n\nexport const getCurrentConversationMembers = createSelector(\n  [\n    getUsersById,\n    getCurrentConversationId,\n    getUsersByConversationId,\n    getPresenceByConversationId\n  ],\n  (\n    users: UsersIndexedById,\n    conversationId: string,\n    conversationMemberships: MembershipHash,\n    conversationPresence: ConversationPresence\n  ): UserFragment[] => {\n    let presence = conversationPresence[conversationId];\n    return conversationMemberships[conversationId]\n      ? conversationMemberships[conversationId].map(user => {\n          return {\n            ...users[user.id],\n            presence: presence\n              ? presence.occupants.filter(occupant => {\n                  return occupant.uuid === user.id;\n                }).length > 0\n              : false\n          };\n        })\n      : [];\n  }\n);\n\nconst orderByPresence = (members: UserFragment[]) => {\n  return members.sort((userA, userB) =>\n    userA.presence === userB.presence ? 0 : userA.presence ? -1 : 1\n  );\n};\nconst ConversationMembers = () => {\n  const userId = useSelector(getLoggedInUserId);\n  const members: UserFragment[] = useSelector(getCurrentConversationMembers);\n  const currentConversationId = useSelector(getCurrentConversationId);\n  const dispatch = useDispatch();\n  const pubnub = usePubNub();\n  const views = useSelector(getViewStates);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n  const conversation = useSelector(getCurrentConversationDescription);\n  const conversationColor = getUniqueColor(\n    conversation.name,\n    (theme.colors.avatars as unknown) as string[]\n  );\n\n  useEffect(() => {\n    if (members.length === 0) {\n      dispatch(\n        fetchMembers({\n          spaceId: currentConversationId,\n          include: {\n            userFields: true,\n            customUserFields: true,\n            totalCount: false\n          }\n        })\n      );\n\n      dispatch(\n        fetchHereNow({\n          channels: [currentConversationId]\n        })\n      );\n    }\n  }, [members, currentConversationId, pubnub, dispatch]);\n\n  return (\n    <Wrapper\n      animate={views.ConversationMembers ? \"open\" : \"closed\"}\n      variants={getAnimatedWrapperVariants(isMedium, theme.sizes[4])}\n      transition={{ ease: \"linear\", duration: 0.15 }}\n    >\n      <Controls>\n        <CloseIcon\n          onClick={() => {\n            dispatch(conversationMembersViewHidden());\n          }}\n        >\n          <CrossIcon\n            color={theme.colors.normalText}\n            title=\"close members list\"\n          />\n        </CloseIcon>\n      </Controls>\n      <Header>\n        <IconWrapper>\n          <ConversationIcon color={conversationColor}>#</ConversationIcon>\n          <Details>\n            <Channel>{conversation.name}</Channel>\n          </Details>\n        </IconWrapper>\n      </Header>\n      <Title>Members</Title>\n      <ScrollableView>\n        {orderByPresence(members).map(user => (\n          <MemberDescription\n            user={user}\n            key={user.id}\n            you={user.id === userId}\n          />\n        ))}\n      </ScrollableView>\n    </Wrapper>\n  );\n};\n\nexport { ConversationMembers };\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { getConversationsByUserId } from \"../joinedConversationModel\";\nimport { MembershipHash } from \"../joinedConversationModel\";\nimport {\n  ConversationsIndexedById,\n  getConversationsById\n} from \"features/conversations/conversationModel\";\nimport { focusOnConversation } from \"features/currentConversation/currentConversationModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { AddIcon } from \"foundations/components/icons/AddIcon\";\nimport { ConversationItem } from \"../ConversationItem\";\nimport {\n  Wrapper,\n  Title,\n  AddButton,\n  ConversationList\n} from \"./MyConversations.style\";\nimport { fetchSpaces, fetchMembers } from \"pubnub-redux\";\nimport { getCurrentConversationMembers } from \"features/conversationMembers/ConversationMembers/ConversationMembers\";\nimport { UserFragment } from \"features/conversationMembers/MemberDescription/MemberDescription\";\nimport { leaveConversation } from \"../leaveConversationCommand\";\nimport {\n  currentConversationViewDisplayed,\n  joinConversationViewDisplayed,\n  menuViewHidden\n} from \"features/layout/LayoutActions\";\n\nexport interface ConversationFragment {\n  id: string;\n  name: string;\n}\n\nexport const getJoinedConversations = createSelector(\n  [getConversationsById, getLoggedInUserId, getConversationsByUserId],\n  (\n    conversations: ConversationsIndexedById,\n    userId: string,\n    userConversations: MembershipHash\n  ): ConversationFragment[] => {\n    return userConversations[userId]\n      ? userConversations[userId].map(conversation => {\n          return {\n            id: conversation.id,\n            name: conversations[conversation.id].name\n          };\n        })\n      : [];\n  }\n);\n\nconst MyConversations = () => {\n  const currentUserId = useSelector(getLoggedInUserId);\n  const conversationsById = useSelector(getConversationsById);\n  const conversations: ConversationFragment[] = useSelector(\n    getJoinedConversations\n  );\n  const currentConversationId: string = useSelector(getCurrentConversationId);\n  const members: UserFragment[] = useSelector(getCurrentConversationMembers);\n  const dispatch = useDispatch();\n  const openOverlay = () => {\n    dispatch(fetchSpaces());\n    dispatch(joinConversationViewDisplayed());\n  };\n\n  if (conversationsById === undefined) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Wrapper>\n      <Title>\n        Conversations\n        <AddButton onClick={openOverlay}>\n          <AddIcon title=\"Join conversation\" />\n        </AddButton>\n      </Title>\n      <ConversationList>\n        {conversations.map(conversation => (\n          <ConversationItem\n            id={conversation.id}\n            name={conversation.name}\n            onLeave={() => {\n              dispatch(leaveConversation(currentUserId, conversation.id));\n            }}\n            selected={conversation.id === currentConversationId}\n            key={conversation.id}\n            unreadMessageCount={0}\n            onClick={() => {\n              dispatch(focusOnConversation(conversation.id));\n              dispatch(currentConversationViewDisplayed());\n              dispatch(menuViewHidden());\n\n              if (members.length === 0) {\n                dispatch(\n                  fetchMembers({\n                    spaceId: conversation.id,\n                    include: {\n                      userFields: true,\n                      customUserFields: true,\n                      totalCount: false\n                    }\n                  })\n                );\n              }\n            }}\n          ></ConversationItem>\n        ))}\n      </ConversationList>\n    </Wrapper>\n  );\n};\n\nexport { MyConversations };\n","import { ThunkAction } from \"main/storeTypes\";\nimport { leaveSpaces } from \"pubnub-redux\";\nimport {\n  focusOnConversation,\n  DEFAULT_CONVERSATION\n} from \"features/currentConversation/currentConversationModel\";\n\n/**\n * Leave the current conversation and select the default conversation\n * as the current conversation.  (The application expects that some\n * conversation will always be current.)\n */\nexport const leaveConversation = (\n  userId: string,\n  conversationId: string\n): ThunkAction<Promise<void>> => {\n  return (dispatch, getState, context) => {\n    if (conversationId === DEFAULT_CONVERSATION) {\n      return Promise.resolve();\n    }\n    return dispatch(\n      leaveSpaces({\n        userId: userId,\n        spaces: [{ id: conversationId }]\n      })\n    ).then(() => {\n      context.pubnub.api.unsubscribe({\n        channels: [conversationId]\n      });\n      dispatch(focusOnConversation(DEFAULT_CONVERSATION));\n    });\n  };\n};\n","import styled from \"styled-components/macro\";\nimport { motion } from \"framer-motion\";\n\nexport const Wrapper = styled(motion.section)`\n  flex-direction: column;\n  z-index: 100;\n  width: 100%;\n  max-width: none;\n  background: ${({ theme }) => theme.backgrounds.primary};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    min-width: ${({ theme }) => theme.sizes[4]};\n    max-width: ${({ theme }) => theme.sizes[4]};\n  }\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  position: absolute;\n  top: 0;\n  min-height: ${({ theme }) => theme.sizes[1]};\n  padding: ${({ theme }) => `${theme.space[6]}`};\n  width: 100%;\n`;\n\nexport const CloseIcon = styled.span`\n  cursor: pointer;\n  ${({ theme }) => theme.mediaQueries.medium} {\n    display: none;\n  }\n`;\n\nexport const Img = styled.img`\n  align-self: flex-end;\n  margin-top: auto;\n  max-width: 100%;\n`;\n\nexport const getAnimatedWrapperVariants = (\n  isMedium: boolean,\n  size: string\n) => ({\n  open: {\n    x: \"0%\",\n    display: \"flex\"\n  },\n  closed: {\n    x: isMedium ? `-${size}` : \"-100%\",\n    transitionEnd: {\n      display: \"none\"\n    }\n  }\n});\n","import React from \"react\";\n\nexport const LogoIcon = () => {\n  return (\n    <svg height=\"100%\" viewBox=\"0 0 60 60\">\n      <g\n        id=\"Team-Chat\"\n        stroke=\"none\"\n        strokeWidth={1}\n        fill=\"none\"\n        fillRule=\"evenodd\"\n      >\n        <rect\n          id=\"Rectangle\"\n          fill=\"#DE2440\"\n          x={0}\n          y={0}\n          width={60}\n          height={60}\n          rx={10}\n        />\n        <path\n          d=\"M17.8154297,40 L17.8154297,31.0058594 L21.8730469,31.0058594 C23.9726562,31.0058594 25.6108398,30.5493164 26.7875977,29.6362305 C27.9643555,28.7231445 28.5527344,27.2265625 28.5527344,25.1464844 C28.5527344,23.2128906 28.003418,21.8041992 26.9047852,20.9204102 C25.8061523,20.0366211 24.0556641,19.5947266 21.6533203,19.5947266 L21.6533203,19.5947266 L14.6074219,19.5947266 L14.6074219,40 L17.8154297,40 Z M21.2431641,28.5742188 L17.8154297,28.5742188 L17.8154297,22.0263672 L21.2431641,22.0263672 C22.6591797,22.0263672 23.6821289,22.2558594 24.3120117,22.7148438 C24.9418945,23.1738281 25.2568359,23.984375 25.2568359,25.1464844 C25.2568359,26.4648438 24.9272461,27.3657227 24.2680664,27.8491211 C23.6088867,28.3325195 22.6005859,28.5742188 21.2431641,28.5742188 L21.2431641,28.5742188 Z M35.0859375,40 L35.0859375,27.2558594 C35.3691406,27.1484375 35.8671875,27.0043945 36.5800781,26.8237305 C37.2929688,26.6430664 38.0791016,26.5527344 38.9384766,26.5527344 C40.2763672,26.5527344 41.2260742,26.8798828 41.7875977,27.5341797 C42.3491211,28.1884766 42.6298828,29.2236328 42.6298828,30.6396484 L42.6298828,30.6396484 L42.6298828,40 L45.75,40 L45.75,29.3212891 C45.75,27.6025391 45.1689453,26.3330078 44.0068359,25.5126953 C42.8447266,24.6923828 41.1845703,24.2822266 39.0263672,24.2822266 C38.2451172,24.2822266 37.4736328,24.3359375 36.7119141,24.4433594 C35.9501953,24.5507812 35.2495117,24.675293 34.6098633,24.8168945 C33.9702148,24.9584961 33.4208984,25.0976562 32.9619141,25.234375 L32.9619141,25.234375 L31.9804688,25.5419922 L31.9804688,40 L35.0859375,40 Z\"\n          id=\"Pn\"\n          fill=\"#FFFFFF\"\n          fillRule=\"nonzero\"\n        />\n      </g>\n    </svg>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface PresenceIndicatorIconProps {\n  title: string;\n  active: boolean;\n  size: number;\n}\n\nexport const PresenceIndicatorIcon = ({\n  title,\n  active,\n  size\n}: PresenceIndicatorIconProps) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={size} height={size}>\n      <title>{title}</title>\n      <circle\n        cx={size / 2}\n        cy={size / 2}\n        r={size / 2}\n        fill={active ? theme.colors.success : theme.colors.inactive}\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.span<{ size: number }>`\n  height: ${({ size }) => size}px;\n  width: ${({ size }) => size}px;\n  display: flex;\n`;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"main/storeTypes\";\nimport { PresenceIndicatorIcon } from \"foundations/components/icons/PresenceIndicatorIcon\";\nimport { Wrapper } from \"./NetworkStatus.style\";\n\ninterface NetworkStatusProps {\n  size: number;\n}\n\nconst NetworkStatus = ({ size }: NetworkStatusProps) => {\n  let isConnected: boolean = useSelector(\n    (state: AppState) => state.networkStatus.isConnected\n  );\n  return (\n    <Wrapper size={size}>\n      <PresenceIndicatorIcon\n        size={size}\n        title={isConnected ? \"connected\" : \"not connected\"}\n        active={isConnected}\n      />\n    </Wrapper>\n  );\n};\n\nexport { NetworkStatus };\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding-bottom: 0px;\n  text-transform: capitalize;\n`;\n\nexport const UserName = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  color: ${({ theme }) => theme.colors.onPrimary};\n  padding-right: ${({ theme }) => theme.space[1]};\n`;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { NetworkStatus } from \"../NetworkStatus\";\nimport { Wrapper, UserName } from \"./MyUserDetails.style\";\n\nexport interface MyUserDetailsFragment {\n  name: string;\n  profileUrl: string;\n  custom: {\n    title: string;\n  };\n}\n\nconst MyUserDetails = () => {\n  const userId = useSelector(getLoggedInUserId);\n  const usersById = useSelector(getUsersById);\n  const user = usersById[userId];\n\n  // We must always have a user; change this to a development time error check\n  if (user === undefined) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Wrapper>\n      <UserName>{user.name}</UserName>\n      <NetworkStatus size={7} />\n    </Wrapper>\n  );\n};\n\nexport { MyUserDetails };\n","import React, { useContext } from \"react\";\nimport styled, { ThemeContext } from \"styled-components\";\nimport { LogoIcon } from \"./icons/LogoIcon\";\nimport { MyUserDetails } from \"features/currentUser/MyUserDetails\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: ${({ theme }) => theme.sizes[3]};\n  width: 100%;\n  padding: ${({ theme }) => theme.space[6]};\n  padding-bottom: 0px;\n`;\n\nconst Details = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: ${({ theme }) => theme.space[4]};\n  min-height: ${({ theme }) => theme.sizes[1]};\n  justify-content: space-between;\n`;\n\nconst CompanyName = styled.span`\n  color: ${({ theme }) => theme.colors.onPrimary};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n`;\n\nexport const Branding: React.FC = () => {\n  const theme = useContext(ThemeContext);\n  return (\n    <Wrapper>\n      <LogoIcon></LogoIcon>\n      <Details>\n        <CompanyName>{theme.custom.companyName}</CompanyName>\n        <MyUserDetails />\n      </Details>\n    </Wrapper>\n  );\n};\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport {\n  createMessageReducer,\n  Message as PubNubMessageEnvelope\n} from \"pubnub-redux\";\nimport { RtcCallState } from \"features/rtc/RtcCallState\";\n\n/**\n * Define the types of messages that this application is designed to work with.\n *\n * This application only defines \"text\" messages, but you can add more here.\n */\nexport enum MessageType {\n  Text = \"text\",\n  Rtc = \"rtc\"\n}\n\n/**\n * BaseMessage defines a structure that ALL messages that the application works should conform to.\n */\nexport interface BaseMessage {\n  /**\n   * An indicator of the type of this message, which must appear in the MessageType enum.\n   */\n  type: MessageType;\n\n  /**\n   * The user id of the user that sent this message\n   */\n  senderId: string;\n}\n\n/**\n * Defines a text message with a UTF-8 encoding\n */\nexport interface TextMessage extends BaseMessage {\n  /**\n   * type must be \"text\"\n   */\n  type: MessageType.Text;\n\n  /**\n   * The message content with a UTF-8 unicode encoding\n   */\n  text: string;\n}\n\nexport interface RtcMessage extends BaseMessage {\n  /**\n   * type must be \"rtc\"\n   */\n  type: MessageType.Rtc;\n\n  /**\n   * The message content with a UTF-8 unicode encoding\n   */\n  callState: RtcCallState;\n\n  startTime: number;\n\n  peerDescription?: object;\n}\n\n/**\n * This is a union of all of the message types that the application works with.\n *\n * To add a new message type, add a new type identifier to the MessageType enum.\n *\n *    MyCustomMessageType = \"my-custom-message-type\",\n *\n * Then declare a new message type that extends BaseMessage that uses the enum\n *\n *     export interface MyCustomMessage extends BaseMessage {\n *       type: MessageType.MyCustomMessageType;\n *       myField: string;\n *     }\n *\n * Then add that type to this AppMessage union type\n *    export type AppMessage = TextMessage | MyCustomMessage;\n *\n * You will also need to modify the application to work with your new message type.\n * Using your IDE to find references to AppMessage will help find those areas you\n * need to modify.\n */\nexport type AppMessage = TextMessage | RtcMessage;\n\n/**\n * Customize the PubNub message envelope declaration to include our custom message types\n * and define which fields from the envelope this application will have access to.\n *\n * Fields that are not included in this list may appear in the data but will be ignored by\n * the application.  To remove the fields entirely (for example to use less memory),\n *  use a filter on the incoming messages from subscribe.\n */\nexport type MessageEnvelope = Required<\n  Pick<PubNubMessageEnvelope, \"channel\" | \"message\" | \"timetoken\">\n> & {\n  message: AppMessage;\n};\n\n/**\n * create a reducer which holds all known messsage envelope objects in a normalized form\n */\nexport const MessageStateReducer = createMessageReducer<MessageEnvelope>();\n\n/**\n * THis Slice selector is used internally to access the state of the reducer,\n * primarily as the base selector function for creating other selectors.\n */\nconst getMessagesSlice = (state: AppState) => state.messages;\n\n/**\n * Returns an index which can be used to find user objects\n */\nexport const getMessagesById = createSelector([getMessagesSlice], messages => {\n  return messages.byId;\n});\n","import React, { useRef, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { MyConversations } from \"features/joinedConversations/MyConversations/MyConversations\";\nimport {\n  Wrapper,\n  Controls,\n  CloseIcon,\n  getAnimatedWrapperVariants\n} from \"./Menu.style\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { Branding } from \"foundations/components/Branding\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport { menuViewHidden } from \"features/layout/LayoutActions\";\n\nconst Menu = () => {\n  const view = useRef<HTMLElement>(null);\n  const views = useSelector(getViewStates);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper\n      ref={view}\n      animate={views.Menu || isMedium ? \"open\" : \"closed\"}\n      variants={getAnimatedWrapperVariants(isMedium, theme.sizes[4])}\n    >\n      <Controls>\n        <CloseIcon onClick={() => dispatch(menuViewHidden())}>\n          <CrossIcon\n            color={theme.colors.onPrimary}\n            title=\"close conversations\"\n          />\n        </CloseIcon>\n      </Controls>\n      <Branding></Branding>\n      <MyConversations />\n    </Wrapper>\n  );\n};\n\nexport { Menu };\n","import styled from \"styled-components/macro\";\nimport { motion } from \"framer-motion\";\n\nexport const Wrapper = styled(motion.section)`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  z-index: 0;\n  margin: ${({ theme }) => theme.space[0]};\n  width: 100%;\n  height: 100%;\n  background: ${({ theme }) => theme.backgrounds.content};\n  border: ${({ theme }) =>\n    `${theme.borders.light} ${theme.colors.borderLight}`};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    position: static;\n  }\n`;\n\nexport const Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: ${({ theme }) => theme.space[5]};\n  margin-top: ${({ theme }) => theme.space[0]};\n  height: 100%;\n`;\n\nexport const animatedWrapperVariants = {\n  open: {\n    display: \"flex\"\n  },\n  closed: {\n    transitionEnd: {\n      display: \"none\"\n    }\n  }\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-shrink: 0;\n  padding: ${({ theme }) => `${theme.space[1]} ${theme.space[5]}`};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    padding: ${({ theme }) => `${theme.space[1]} ${theme.space[6]}`};\n  }\n  :hover {\n    background-color: ${({ theme }) => theme.backgrounds.contentHover};\n  }\n  :first-child {\n    margin-top: auto;\n  }\n  :last-child {\n    padding-bottom: ${({ theme }) => theme.space[4]};\n  }\n`;\n\nexport const Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: ${({ theme }) => theme.space[5]};\n`;\n\nexport const Header = styled.div`\n  margin: ${({ theme }) => theme.space[0]};\n  margin-bottom: ${({ theme }) => theme.space[1]};\n`;\n\nexport const Content = styled.div`\n  white-space: pre-wrap;\n  width: fit-content;\n  padding: ${({ theme }) => theme.space[5]};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  border-radius: ${({ theme }) => theme.radii.strong};\n  border-top-left-radius: ${({ theme }) => theme.radii.square};\n  text-align: left;\n  background: ${({ theme }) => theme.backgrounds.message};\n  color: ${({ theme }) => theme.colors.messageText};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    font-size: ${({ theme }) => theme.fontSizes.regular};\n  }\n`;\n\nexport const Avatar = styled.div`\n  width: ${({ theme }) => theme.sizes[1]};\n  height: ${({ theme }) => theme.sizes[1]};\n`;\n\nexport const SenderName = styled.span<{ showDetails: boolean }>`\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  text-transform: capitalize;\n  color: ${({ theme }) => theme.colors.importantText};\n  cursor: ${({ theme, showDetails }) => (showDetails ? \"pointer\" : \"default\")};\n  &:hover {\n    text-decoration: ${({ theme, showDetails }) =>\n      showDetails ? \"underline\" : \"default\"};\n  }\n`;\n\nexport const TimeSent = styled.span`\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.light};\n  margin-left: ${({ theme }) => theme.space[3]};\n  color: ${({ theme }) => theme.colors.importantText};\n`;\n","import styled from \"styled-components/macro\";\n\nexport const Content = styled.div`\n  white-space: pre-wrap;\n  border-radius: ${({ theme }) => theme.radii.strong};\n  border-top-left-radius: ${({ theme }) => theme.radii.square};\n  padding: ${({ theme }) => theme.space[4]};\n  width: fit-content;\n  line-height: 1.5;\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  text-align: left;\n  background: ${({ theme }) => theme.backgrounds.message};\n  box-shadow: ${({ theme }) => theme.shadows[0]};\n  color: ${({ theme }) => theme.colors.messageText};\n`;\n","import React from \"react\";\nimport { Content } from \"./TextMessageDisplay.style\";\nimport { TextMessage } from \"../messageModel\";\n\ntype TextMessageProps = {\n  message: TextMessage;\n};\n\n/**\n * Display a TextMessage such as it would appear in a list of messages\n */\nexport const TextMessageDisplay = ({ message }: TextMessageProps) => {\n  return <Content>{message.text}</Content>;\n};\n","import { Dispatch } from \"redux\";\nimport { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createSignalReducer, Signal } from \"pubnub-redux\";\nimport { SignalActionType, PresenceCategory } from \"pubnub-redux\";\nimport { AppActions } from \"main/AppActions\";\nimport { SignalState } from \"pubnub-redux/dist/features/signal/SignalReducer\";\nimport { MessageActionType } from \"pubnub-redux\";\nimport { PresenceEventMessage } from \"pubnub-redux/dist/features/presence/PresenceActions\";\n\nexport const TYPING_INDICATOR_DURATION_SECONDS = 10;\n\nexport enum TypingIndicatorType {\n  ShowTypingIndicator = \"ti_show\",\n  HideTypingIndicator = \"ti_hide\"\n}\n\nexport enum TypingIndicatorActionType {\n  REMOVE_TYPING_INDICATOR = \"REMOVE_TYPING_INDICATOR\",\n  REMOVE_TYPING_INDICATOR_ALL = \"REMOVE_TYPING_INDICATOR_ALL\"\n}\n\nexport interface TypingIndicator extends Signal {\n  type: TypingIndicatorType;\n}\n\nexport type TypingIndicatorEnvelope = Required<\n  Pick<Signal, \"channel\" | \"message\" | \"timetoken\" | \"publisher\">\n> & {\n  message: TypingIndicator;\n};\n\nconst signalReducer = createSignalReducer<TypingIndicatorEnvelope>();\n\nconst defaultState = { byId: {} };\n\nconst removeTypingIndicator = (\n  state: SignalState<TypingIndicatorEnvelope>,\n  channel: string,\n  userId: string,\n  timetoken?: number\n): SignalState<TypingIndicatorEnvelope> => {\n  let newState = {\n    byId: { ...state.byId }\n  };\n\n  if (newState.byId[channel]) {\n    newState.byId[channel] = newState.byId[channel].filter(signal =>\n      timetoken\n        ? !(signal.publisher === userId && signal.timetoken === timetoken)\n        : !(signal.publisher === userId)\n    );\n  }\n\n  return newState;\n};\n\n/**\n * create a reducer which holds all typing indicator signal objects in a normalized form\n */\nexport const TypingIndicatorStateReducer = (\n  state: SignalState<TypingIndicatorEnvelope>,\n  action: AppActions\n): SignalState<TypingIndicatorEnvelope> => {\n  switch (action.type) {\n    case SignalActionType.SIGNAL_RECEIVED:\n      if (\n        action.payload.message.type === TypingIndicatorType.ShowTypingIndicator\n      ) {\n        // we only want to store the show typing indicator signals\n        // the hide signal is handled by the listener below\n        return signalReducer(state, action);\n      }\n\n      return state || defaultState;\n    case TypingIndicatorActionType.REMOVE_TYPING_INDICATOR:\n      return removeTypingIndicator(\n        state,\n        action.payload.channel,\n        action.payload.userId,\n        action.payload.timetoken\n      );\n    case TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL:\n      return removeTypingIndicator(\n        state,\n        action.payload.channel,\n        action.payload.userId\n      );\n    case MessageActionType.MESSAGE_RECEIVED:\n      return removeTypingIndicator(\n        state,\n        action.payload.channel,\n        action.payload.message.senderId\n      );\n    default:\n      return state || defaultState;\n  }\n};\n\nexport interface RemoveTypingIndicatorPayload {\n  userId: string;\n  channel: string;\n  timetoken: number;\n}\n\nexport interface RemoveTypingIndicatorAllPayload {\n  userId: string;\n  channel: string;\n}\n\nexport interface RemoveTypingIndicatorAction {\n  type: typeof TypingIndicatorActionType.REMOVE_TYPING_INDICATOR;\n  payload: RemoveTypingIndicatorPayload;\n}\n\nexport interface RemoveTypingIndicatorAllAction {\n  type: typeof TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL;\n  payload: RemoveTypingIndicatorAllPayload;\n}\n\n/**\n * This Slice selector is used internally to access the state of the reducer,\n * primarily as the base selector function for creating other selectors.\n */\nconst getTypingIndicatorsSlice = (\n  state: AppState\n): SignalState<TypingIndicatorEnvelope> => state.typingIndicators;\n\n/**\n * Returns an index which can be used to find signal objects\n */\nexport const getTypingIndicatorsById = createSelector(\n  [getTypingIndicatorsSlice],\n  typingIndicators => {\n    return typingIndicators.byId;\n  }\n);\n\nexport const typingIndicatorRemoved = (\n  payload: RemoveTypingIndicatorPayload\n): RemoveTypingIndicatorAction => ({\n  type: TypingIndicatorActionType.REMOVE_TYPING_INDICATOR,\n  payload\n});\n\nexport const typingIndicatorRemovedAll = (\n  payload: RemoveTypingIndicatorAllPayload\n): RemoveTypingIndicatorAllAction => ({\n  type: TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL,\n  payload\n});\n\n/**\n * This listener will initiate a timer to dispatch a RemoveTypingIndicatorAction once the\n * TYPING_INDICATOR_DURATION_SECONDS time is passed\n */\nexport const createTypingIndicatorsListener = (\n  dispatch: Dispatch<AppActions>\n): any => ({\n  signal: (payload: TypingIndicatorEnvelope) => {\n    if (payload.message.type === TypingIndicatorType.ShowTypingIndicator) {\n      // hide indicator after display seconds\n      setTimeout(() => {\n        dispatch(\n          typingIndicatorRemoved({\n            userId: payload.publisher,\n            channel: payload.channel,\n            timetoken: payload.timetoken\n          })\n        );\n      }, TYPING_INDICATOR_DURATION_SECONDS * 1000);\n    } else if (\n      payload.message.type === TypingIndicatorType.HideTypingIndicator\n    ) {\n      // hide indicator now, removes all for user regardless of time token\n      dispatch(\n        typingIndicatorRemovedAll({\n          userId: payload.publisher,\n          channel: payload.channel\n        })\n      );\n    }\n  },\n  presence: (payload: PresenceEventMessage) => {\n    if (\n      payload.action === PresenceCategory.LEAVE ||\n      payload.action === PresenceCategory.TIMEOUT\n    ) {\n      dispatch(\n        typingIndicatorRemovedAll({\n          userId: payload.uuid,\n          channel: payload.channel\n        })\n      );\n    }\n  }\n});\n","import React from \"react\";\nimport invariant from \"invariant\";\nimport { TextMessageDisplay } from \"features/messages/TextMessageDisplay\";\nimport { MessageType, AppMessage } from \"features/messages/messageModel\";\n\ntype MessageProps = {\n  message: AppMessage;\n};\n\n/**\n * Display a Message based on its type\n */\nexport const MessageDisplay = ({ message }: MessageProps) => {\n  switch (message.type) {\n    case MessageType.Text:\n      return <TextMessageDisplay message={message}></TextMessageDisplay>;\n\n    // <== Add additional message types here.\n\n    // Don't show anything for an unrecognized message type\n    default:\n      invariant(\n        false,\n        `No component available for displaying message of type \"${message.type}\"`\n      );\n  }\n};\n","import React, { ReactNode } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport convertTimestampToTime from \"foundations/utilities/convertTimestampToTime\";\nimport {\n  Wrapper,\n  Body,\n  Header,\n  Avatar,\n  SenderName,\n  TimeSent\n} from \"./MessageListItem.style\";\nimport { MessageDisplay } from \"features/messages/MessageDisplay\";\nimport { AppMessage } from \"features/messages/messageModel\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { userDetailViewDisplayed } from \"../../layout/LayoutActions\";\nimport { selectUser } from \"../../userDetail/userDetailModel\";\n\n// TODO: Explain message fragment\nexport interface MessageFragment {\n  sender: {\n    id: string;\n    name: string;\n  };\n  timetoken: string;\n  message: AppMessage;\n}\n\ninterface MessageProps {\n  messageFragment: MessageFragment;\n  avatar: ReactNode;\n}\n\n/**\n * Display a message as it appears in a list\n */\nconst MessageListItem = ({ messageFragment, avatar }: MessageProps) => {\n  const dispatch = useDispatch();\n  let sender = messageFragment.sender;\n  const usersById = useSelector(getUsersById);\n  let hasSender = false;\n\n  const openUserDetailsOverlay = () => {\n    if (hasSender) {\n      // don't open overlay for PubNub Bot\n      dispatch(selectUser(messageFragment.sender.id));\n      dispatch(userDetailViewDisplayed());\n    }\n  };\n\n  if (messageFragment.sender && messageFragment.sender.id) {\n    const user = usersById[messageFragment.sender.id];\n    hasSender = user !== undefined;\n  }\n  return (\n    <Wrapper>\n      <Avatar>{avatar}</Avatar>\n      <Body>\n        <Header>\n          <SenderName showDetails={hasSender} onClick={openUserDetailsOverlay}>\n            {sender.name}\n          </SenderName>\n          <TimeSent>\n            {convertTimestampToTime(messageFragment.timetoken)}\n          </TimeSent>\n        </Header>\n        <MessageDisplay message={messageFragment.message}></MessageDisplay>\n      </Body>\n    </Wrapper>\n  );\n};\n\nexport { MessageListItem };\n","export default (ts: string) => {\n  const date = new Date(parseInt(ts) / 10000);\n  const minutes = date.getMinutes();\n  return `${date.getHours()}:${minutes > 9 ? minutes : \"0\" + minutes}`;\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  overflow-y: scroll;\n  height: 100%;\n`;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { UserInitialsAvatar } from \"foundations/components/UserInitialsAvatar\";\nimport { MessageListItem, MessageFragment } from \"../MessageListItem\";\nimport { MessageType } from \"features/messages/messageModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { getUsersById } from \"features/users/userModel\";\n\nconst capitalize = (string: string): string => {\n  return string\n    .split(\" \")\n    .map(token => token.charAt(0).toUpperCase() + token.slice(1))\n    .join(\" \");\n};\n\nconst welcome = (name: string): MessageFragment => ({\n  sender: {\n    id: \"PUBNUB-BOT\",\n    name: \"PubNub Bot\"\n  },\n  timetoken: \"15735897955841496\",\n  message: {\n    type: MessageType.Text,\n    senderId: \"PUBNUB-BOT\",\n    text: `Welcome to Team Chat. 👋👋 \\nWe logged you in as ${capitalize(\n      name\n    )}. \\nSend a message now to start interacting with other users in the app. ⬇️`\n  }\n});\n\nconst WelcomeMessage = () => {\n  const userId = useSelector(getLoggedInUserId);\n  const usersById = useSelector(getUsersById);\n  const user = usersById[userId];\n  const welcomeMessage = welcome(user.name);\n  return (\n    <MessageListItem\n      messageFragment={welcomeMessage}\n      key={welcomeMessage.timetoken}\n      avatar={\n        <UserInitialsAvatar\n          size={36}\n          name=\"P N\"\n          userId={welcomeMessage.sender.id}\n          color=\"#DE2440\"\n        />\n      }\n    />\n  );\n};\n\nexport default WelcomeMessage;\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { MessageListItem, MessageFragment } from \"../MessageListItem\";\nimport { getCurrentConversationId } from \"../currentConversationModel\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { getMessagesById } from \"features/messages/messageModel\";\nimport { Wrapper } from \"./MessageList.style\";\nimport WelcomeMessage from \"./WelcomeMessage\";\nimport { UserInitialsAvatar } from \"foundations/components/UserInitialsAvatar\";\n\n/**\n * Create a selector that that returns the list of messages in the currentConversation joined\n * to the user that sent that message\n *\n * TODO:\n * This implementation will cause the dependant component to re-render if any user data has changed\n * if the current conversation has changed or if any message has changed or if any user has changed.\n * This needs to be reduced in scope\n *\n * TODO: This needs to sort by time token; object keys are not guarenteed to retain order in js.\n */\nexport const getCurrentConversationMessages = createSelector(\n  [getMessagesById, getCurrentConversationId, getUsersById],\n  (messages, conversationId, users): MessageFragment[] => {\n    return messages[conversationId]\n      ? Object.values(messages[conversationId])\n          .filter(message => message.channel === conversationId)\n          .map(\n            (message): MessageFragment => {\n              return {\n                ...message,\n                timetoken: String(message.timetoken),\n                sender:\n                  users[message.message.senderId] ||\n                  (message.message.senderId\n                    ? {\n                        id: message.message.senderId,\n                        name: message.message.senderId\n                      }\n                    : {\n                        id: \"unknown\",\n                        name: \"unknown\"\n                      })\n              };\n            }\n          )\n      : [];\n  }\n);\n\nconst MessageList = () => {\n  type ConversationScrollPositionsType = { [conversationId: string]: number };\n  const conversationId: string = useSelector(getCurrentConversationId);\n  const [\n    conversationsScrollPositions,\n    setConversationsScrollPositions\n  ] = useState<ConversationScrollPositionsType>({});\n\n  const updateCurrentConversationScrollPosition = (scrollPosition: number) => {\n    setConversationsScrollPositions({\n      ...conversationsScrollPositions,\n      [conversationId]: scrollPosition\n    });\n  };\n\n  const handleScroll = (e: any) => {\n    const scrollPosition = e.target.scrollTop;\n    if (scrollPosition !== 0) {\n      updateCurrentConversationScrollPosition(scrollPosition);\n    }\n  };\n\n  const restoreConversationScrollPosition = (conversationId: string) => {\n    const conversationScrollPosition: number =\n      conversationsScrollPositions[conversationId];\n    if (conversationScrollPosition) {\n      wrapper.current.scrollTo(0, conversationScrollPosition);\n    }\n  };\n\n  const memoizedRestoreConversationScrollPositionCallback = useCallback(\n    restoreConversationScrollPosition,\n    [conversationId]\n  );\n\n  const messages: MessageFragment[] = useSelector(\n    getCurrentConversationMessages\n  );\n  const wrapper = useRef<HTMLDivElement>(document.createElement(\"div\"));\n  const el = wrapper.current;\n\n  const scrollToBottom = useCallback(() => {\n    return (el.scrollTop = el.scrollHeight - el.clientHeight);\n  }, [el]);\n\n  const hasReachedBottom = el.scrollHeight - el.clientHeight === el.scrollTop;\n\n  useEffect(() => {\n    if (hasReachedBottom) {\n      scrollToBottom();\n    }\n  }, [messages.length, hasReachedBottom, scrollToBottom]);\n\n  useEffect(() => {\n    memoizedRestoreConversationScrollPositionCallback(conversationId);\n  }, [memoizedRestoreConversationScrollPositionCallback, conversationId]);\n\n  return (\n    <Wrapper ref={wrapper} onScroll={handleScroll}>\n      <WelcomeMessage />\n      {messages.map(message => (\n        <MessageListItem\n          messageFragment={message}\n          key={message.timetoken}\n          avatar={\n            <UserInitialsAvatar\n              size={36}\n              name={message.sender.name}\n              userId={message.sender.id}\n            />\n          }\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport { MessageList };\n","import { AppState } from \"main/storeTypes\";\nimport { AppActions } from \"main/AppActions\";\nimport { createSelector } from \"reselect\";\nimport { DraftMessage } from \"features/messages/draft\";\n\nexport const MESSAGE_DRAFT_UPDATED = \"MESSAGE_DRAFT_UPDATED\";\nexport const MESSAGE_DRAFT_DISCARDED = \"MESSAGE_DRAFT_DISCARDED\";\n\nexport interface MessageDraftUpdatedAction {\n  type: typeof MESSAGE_DRAFT_UPDATED;\n  payload: {\n    conversationId: string;\n    value: DraftMessage;\n  };\n}\n\nexport interface MessageDraftDiscardedAction {\n  type: typeof MESSAGE_DRAFT_DISCARDED;\n  payload: {\n    conversationId: string;\n  };\n}\n\n/**\n * Describes a way to lookup a user from a userId\n */\nexport type DraftsIndex = { [id: string]: DraftMessage };\n\nexport interface ConversationDraftState {\n  messageDraftById: DraftsIndex;\n}\n\nconst initialState: ConversationDraftState = {\n  messageDraftById: {}\n};\n\nexport const ConversationDraftStateReducer = (\n  state: ConversationDraftState = initialState,\n  action: AppActions\n): ConversationDraftState => {\n  switch (action.type) {\n    case MESSAGE_DRAFT_UPDATED: {\n      const messageDraftById = {\n        ...state.messageDraftById,\n        [action.payload.conversationId]: action.payload.value\n      };\n      return {\n        ...state,\n        messageDraftById\n      };\n    }\n    case MESSAGE_DRAFT_DISCARDED: {\n      const {\n        [action.payload.conversationId]: discard,\n        ...messageDraftById\n      } = state.messageDraftById;\n      return {\n        ...state,\n        messageDraftById\n      };\n    }\n  }\n  return state;\n};\n\nconst getDraftSlice = (state: AppState) => state.drafts;\n\n/**\n * Returns an index which can be used to find user objects\n */\nexport const getMessageDrafts = createSelector(\n  [getDraftSlice],\n  (drafts): DraftsIndex => {\n    return drafts.messageDraftById;\n  }\n);\n","import { ThunkAction } from \"main/storeTypes\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { sendSignal } from \"pubnub-redux\";\nimport { TypingIndicatorType } from \"./typingIndicatorModel\";\n\n/**\n * Send a typing indicator to the current conversation\n *\n * This command does not handle failure and leaves the error to the caller\n */\nexport const sendTypingIndicator = (\n  typingIndicatorType: TypingIndicatorType\n): ThunkAction => {\n  return (dispatch, getState) => {\n    const state = getState();\n    return dispatch(\n      sendSignal({\n        channel: getCurrentConversationId(state),\n        message: { type: typingIndicatorType }\n      })\n    );\n  };\n};\n","import { useEffect, useCallback, RefObject } from \"react\";\n\nconst isRefArray = (\n  r: RefObject<any> | RefObject<any>[]\n): r is RefObject<any>[] => {\n  return \"length\" in r;\n};\n\nconst isTarget = (ref: RefObject<any>, event: MouseEvent) => {\n  return ref && ref.current && ref.current.contains(event.target);\n};\n\nconst trueForAny = (array: any[], condition: (props: any) => boolean) => {\n  return array.reduce((conditionAlreadyMet, value) => {\n    return conditionAlreadyMet || condition(value);\n  }, false);\n};\n\nconst useClickOutside = (\n  ref: RefObject<any> | RefObject<any>[],\n  onclick: () => void\n) => {\n  const handleClick = useCallback(\n    (click: MouseEvent) => {\n      if (isRefArray(ref)) {\n        if (trueForAny(ref, (ref: RefObject<any>) => isTarget(ref, click))) {\n          return;\n        }\n      } else {\n        if (isTarget(ref, click)) {\n          return;\n        }\n      }\n      onclick();\n    },\n    [onclick, ref]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [handleClick]);\n\n  return ref;\n};\n\nexport default useClickOutside;\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface FunnyEmojiProps {\n  title: string;\n}\n\nexport const FunnyEmojiIcon = ({ title }: FunnyEmojiProps) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={18} height={18}>\n      <title>{title}</title>\n      <g fill={theme.colors.importantText} fillRule=\"evenodd\">\n        <path d=\"M9 .947C4.56.947.947 4.56.947 9c0 4.441 3.613 8.053 8.053 8.053 4.44 0 8.053-3.612 8.053-8.053C17.053 4.56 13.44.947 9 .947M9 18a8.943 8.943 0 01-6.364-2.636A8.937 8.937 0 010 9.001c0-2.404.936-4.664 2.636-6.364A8.939 8.939 0 019 0a8.94 8.94 0 016.364 2.637A8.94 8.94 0 0118 9a8.94 8.94 0 01-2.636 6.363A8.942 8.942 0 019 18\" />\n        <path d=\"M13.957 6.632h-3.282a1.877 1.877 0 01-.217-1.32l.003-.01c.04-.199.112-.389.215-.565h3.282c.167.287.253.61.253.947 0 .337-.087.66-.253.948zm-6.631 0H4.043a1.877 1.877 0 01-.253-.948c0-.336.087-.661.253-.947h3.283c.102.176.174.366.215.564l.003.012a1.886 1.886 0 01-.217 1.319h-.001zm7.263-2.654a.473.473 0 00-.379-.19h-3.789a.475.475 0 00-.379.19 2.833 2.833 0 00-.406.758h-1.27a2.841 2.841 0 00-.408-.759.473.473 0 00-.38-.19H3.79a.475.475 0 00-.379.19 2.817 2.817 0 00-.568 1.706c0 .622.197 1.211.568 1.706.09.12.23.19.38.19h3.789c.149 0 .289-.07.379-.19a2.816 2.816 0 00.568-1.705h.948c0 .62.197 1.21.568 1.706.09.12.23.19.379.19h3.79c.148 0 .288-.07.378-.19a2.816 2.816 0 00.569-1.705c0-.62-.197-1.21-.569-1.706v-.001zM9 15.158a6.162 6.162 0 01-6.074-5.133.474.474 0 01.935-.157 5.192 5.192 0 005.138 4.342c.916 0 1.817-.241 2.605-.698a.474.474 0 01.475.82A6.158 6.158 0 019 15.156v.002z\" />\n      </g>\n    </svg>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  align-self: flex-end;\n`;\n\nexport const Dialog = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n`;\n\nexport const EmojiButton = styled.div`\n  cursor: pointer;\n  svg {\n    vertical-align: top;\n  }\n`;\n","import \"emoji-mart/css/emoji-mart.css\";\nimport React, { useState, useCallback, useRef, useContext } from \"react\";\nimport useClickOutside from \"foundations/hooks/useClickOutside\";\nimport { Picker, EmojiData } from \"emoji-mart\";\nimport { FunnyEmojiIcon } from \"foundations/components/icons/FunnyEmojiIcon\";\nimport { Wrapper, Dialog, EmojiButton } from \"./EmojiInput.style\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface EmojiInputProps {\n  value: string;\n  onSelection(contentWithEmoji: string): any;\n}\n\nconst EmojiInput = ({ value, onSelection }: EmojiInputProps) => {\n  const [showPicker, setPickerState] = useState(false);\n  const picker = useRef<HTMLDivElement>(null);\n\n  const theme = useContext(ThemeContext);\n\n  const dismissPicker = useCallback(() => {\n    setPickerState(false);\n  }, [setPickerState]);\n\n  useClickOutside([picker], dismissPicker);\n\n  const togglePicker = () => {\n    setPickerState(!showPicker);\n  };\n\n  const addEmoji = (emoji: EmojiData) => {\n    if (\"native\" in emoji) {\n      onSelection(`${value}${emoji.native}`);\n      dismissPicker();\n    }\n  };\n\n  return (\n    <Wrapper ref={picker}>\n      <Dialog>\n        {showPicker && (\n          <Picker\n            emoji=\"\"\n            title=\"\"\n            native={true}\n            onSelect={addEmoji}\n            darkMode={theme.custom.dark}\n            color={theme.colors.active}\n          />\n        )}\n      </Dialog>\n      <EmojiButton onClick={togglePicker}>\n        <FunnyEmojiIcon title=\"Open emoji selector\" />\n      </EmojiButton>\n    </Wrapper>\n  );\n};\n\nexport { EmojiInput };\n","import styled from \"styled-components/macro\";\n\nexport const Popup = styled.div`\n  position: relative;\n`;\n\nexport const Suggestions = styled.section`\n  position: absolute;\n  bottom: 0;\n  overflow-y: scroll;\n  z-index: 100;\n  max-height: ${({ theme }) => theme.sizes[4]};\n  border: ${({ theme }) =>\n    `${theme.borders.light} ${theme.colors.borderLight}`};\n  border-radius: ${({ theme }) => theme.radii.light};\n  color: ${({ theme }) => theme.colors.importantText};\n`;\n\nexport const Heading = styled.div`\n  border-top-left-radius: ${({ theme }) => theme.radii.light};\n  border-top-right-radius: ${({ theme }) => theme.radii.light};\n  border-bottom: ${({ theme }) =>\n    `${theme.borders.light} ${theme.colors.borderLight}`};\n  padding: ${({ theme }) => theme.space[1]};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  background: ${({ theme }) => theme.backgrounds.panel};\n`;\n\nexport const EmojiSearchTerm = styled.span`\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n`;\n\nexport const Results = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  border-bottom-left-radius: ${({ theme }) => theme.radii.light};\n  border-bottom-right-radius: ${({ theme }) => theme.radii.light};\n  padding: ${({ theme }) => theme.space[1]};\n  background: ${({ theme }) => theme.backgrounds.panel};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    flex-direction: column;\n    flex-wrap: nowrap;\n  }\n`;\n\nexport const Result = styled.span`\n  cursor: pointer;\n  flex-grow: 0;\n  border-radius: ${({ theme }) => theme.radii.light};\n  padding: ${({ theme }) => `${theme.space[1]} ${theme.space[2]}`};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.active};\n    color: ${({ theme }) => theme.colors.activeText};\n  }\n  ${({ theme }) => theme.mediaQueries.medium} {\n    padding: ${({ theme }) => theme.space[2]};\n    flex-grow: 1;\n  }\n`;\n\nexport const Emoji = styled.span`\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n`;\n\nexport const Colons = styled.span`\n  padding-right: 0.5em;\n  font-size: ${({ theme }) => theme.fontSizes.small};\n`;\n","import \"emoji-mart/css/emoji-mart.css\";\nimport React, { useRef, useContext } from \"react\";\nimport useClickOutside from \"foundations/hooks/useClickOutside\";\nimport { emojiIndex, EmojiData } from \"emoji-mart\";\nimport {\n  Popup,\n  Suggestions,\n  Heading,\n  EmojiSearchTerm,\n  Results,\n  Result,\n  Emoji,\n  Colons\n} from \"./EmojiSuggestion.style\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\ntype EmojiInputProps = {\n  value: string;\n  onSelection(contentWithEmoji: string): any;\n};\n\nconst getEmojisFromEmojiSearchTerm = (emojiSearchTerm: string) =>\n  (emojiIndex.search(emojiSearchTerm) as any) as EmojiData[];\n\nconst getEmojiSearchTerm = (content: string) => {\n  // I don't think this is cross browser - haven't for a better way to detect newlines yet\n  let search = \"\";\n  const colons = content.match(/:([a-z_]+)(:)?/);\n  if (colons) {\n    if (colons[2] !== undefined) {\n      // closing colon is present\n      const match = emojiIndex.emojis[colons[1]];\n      if (match && \"native\" in match) {\n        content = content.replace(colons[0], match.native);\n        search = \"\";\n      } else {\n        const results = (emojiIndex.search(colons[1]) as any) as EmojiData[];\n        if (results[0] && \"native\" in results[0]) {\n          content = content.replace(colons[0], (results[0] as any).native);\n        }\n        search = \"\";\n      }\n    } else if (colons[1].length > 1) {\n      // colons aren't closed, use the search\n      search = colons[1];\n    } else if (colons[1]) {\n      search = \"\";\n    }\n  }\n  return search;\n};\n\nconst EmojiSuggestion = ({ value, onSelection }: EmojiInputProps) => {\n  const suggestions = useRef<HTMLDivElement>(null);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n\n  const replaceEmoji = (search: string, emoji: EmojiData) => {\n    if (\"native\" in emoji) {\n      const txt = value.replace(`:${search}`, emoji.native);\n      onSelection(txt);\n    }\n  };\n\n  let displayed = false;\n\n  const emojiSearchTerm = getEmojiSearchTerm(value);\n  const emojis = getEmojisFromEmojiSearchTerm(emojiSearchTerm);\n\n  if (emojiSearchTerm !== \"\" && emojis.length > 0) {\n    displayed = true;\n  } else {\n    displayed = false;\n  }\n  useClickOutside([suggestions], () => {\n    displayed = false;\n  });\n\n  return (\n    <Popup>\n      {displayed && (\n        <Suggestions ref={suggestions}>\n          <Heading>\n            Suggestions for <EmojiSearchTerm>{emojiSearchTerm}</EmojiSearchTerm>\n          </Heading>\n          <Results>\n            {emojis.slice(0, isMedium ? 35 : 7).map(emoji => (\n              <Result\n                key={emoji.id}\n                onClick={() => replaceEmoji(emojiSearchTerm, emoji)}\n              >\n                <Emoji>{\"native\" in emoji && emoji.native}</Emoji>\n                <Colons>{emoji.colons}</Colons>\n              </Result>\n            ))}\n          </Results>\n        </Suggestions>\n      )}\n    </Popup>\n  );\n};\n\nexport { EmojiSuggestion };\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  flex-grow: 1;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  height: auto;\n`;\n\nexport const TextArea = styled.textarea`\n  flex-grow: 1;\n  resize: none;\n  overflow: auto;\n  border: ${({ theme }) => theme.borders.none};\n  max-height: ${({ theme }) => theme.sizes[4]};\n  padding: ${({ theme }) => theme.space[0]};\n  font-size: ${({ theme }) => theme.fontSizes.messageTextInput};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  color: ${({ theme }) => theme.colors.importantText};\n  background: ${({ theme }) => theme.backgrounds.content};\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.normalText};\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const SendButton = styled.div`\n  align-self: flex-end;\n  display: none;\n  padding: ${({ theme }) => theme.space[1]};\n  margin: ${({ theme }) => `-${theme.space[1]}`};\n  margin-left: ${({ theme }) => theme.space[1]};\n  border-radius: ${({ theme }) => theme.radii.light};\n  background-color: ${({ theme }) => theme.colors.primary[0]};\n  ${({ theme }) => theme.mediaQueries.touch} {\n    display: flex;\n  }\n`;\n","import invariant from \"invariant\";\nimport { MessageType, TextMessage } from \"./messageModel\";\n\n/**\n * We define a draft text message to to be identical to a finalized text message.\n *\n * This does not have to be the case for complext message types.  some fields might\n * be optional in the draft but required in the final version for example.\n */\nexport type DraftTextMessage = TextMessage;\n\n/**\n * This is a union of all draft message types defined by the application.\n *\n * This can differ from the final version of the\n * message in that fields might be missing or temporary editor state may be\n * included.\n *\n * we don't do any of those things in this example, but having a separate type\n * helps to clarify which parts of the code are working with unsent messages.\n */\nexport type DraftMessage = DraftTextMessage;\n\n/**\n * Test if a draft message been modified (used to ignore unmodified drafts).\n */\nexport const isDraftModified = (message: DraftMessage) => {\n  switch (message.type) {\n    case MessageType.Text:\n      return message.text !== \"\";\n    default:\n      invariant(\n        false,\n        `Cannot determin if message of type \"${message.type}\" has been modified.`\n      );\n  }\n};\n","import React, { useContext } from \"react\";\nimport { ThemeContext } from \"styled-components\";\n\ninterface SendIconProps {\n  title: string;\n}\n\nexport const SendIcon = ({ title }: SendIconProps) => {\n  const theme = useContext(ThemeContext);\n  return (\n    <svg width={18} height={18} viewBox=\"0 0 18 18\">\n      <title>{title}</title>\n      <path\n        fill=\"none\"\n        stroke={theme.colors.onPrimary}\n        strokeMiterlimit={10}\n        d=\"M.53,13.46V11.31c0-.74.29-1.1,1-1.15,2.17-.17,4.33-.31,6.5-.46l1.16-.11a.68.68,0,0,0,.67-.67.63.63,0,0,0-.55-.73c-1-.1-2-.16-3-.24L1.45,7.59a.84.84,0,0,1-.88-.82,40.83,40.83,0,0,1,0-5.07,1.36,1.36,0,0,1,2.07-1c2.5,1.26,5,2.54,7.48,3.82l6.14,3.14c.52.26,1,.59,1,1.23s-.45,1-1,1.26Q9.53,13.57,2.8,17A1.46,1.46,0,0,1,.53,15.64C.52,14.91.53,14.19.53,13.46Z\"\n      />\n    </svg>\n  );\n};\n","import React, { useEffect, useRef, useContext } from \"react\";\nimport { EmojiInput } from \"features/emoji/EmojiInput/EmojiInput\";\nimport { EmojiSuggestion } from \"features/emoji/EmojiSuggestion/EmojiSuggestion\";\nimport {\n  Wrapper,\n  Container,\n  TextArea,\n  SendButton\n} from \"./TextMessageEditor.style\";\nimport { MessageType } from \"../messageModel\";\nimport { DraftTextMessage, isDraftModified } from \"../draft\";\nimport { SendIcon } from \"foundations/components/icons/SendIcon\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { ThemeContext } from \"styled-components\";\n\n/**\n * Expand the height of the input box as multiple lines of text are entered.\n */\nconst autoExpand = (el: HTMLTextAreaElement) => {\n  setTimeout(function() {\n    el.style.cssText = \"height:auto; padding:0\";\n    el.style.cssText = \"height:\" + el.scrollHeight + \"px\";\n  }, 0);\n};\n\n/**\n * Update the text field on a draft text message by returning a new object if\n * the new text is different than the text in the old object.\n * This is the proper way to do updates to avoid unnecessary rerendering.\n */\nconst newTextDraft = (\n  draft: DraftTextMessage,\n  newText: string\n): DraftTextMessage => {\n  if (draft.text === newText) {\n    return draft;\n  }\n  return {\n    type: MessageType.Text,\n    senderId: draft.senderId,\n    text: newText\n  };\n};\n\ntype TextMessageEditorProps = {\n  message: DraftTextMessage;\n  sendDraft: (message: DraftTextMessage) => void;\n  updateDraft: (message: DraftTextMessage) => void;\n};\n\n/**\n * Edit a draft Text Message\n */\nexport const TextMessageEditor = ({\n  message,\n  sendDraft,\n  updateDraft\n}: TextMessageEditorProps) => {\n  const theme = useContext(ThemeContext);\n  const touch = useMediaQuery(theme.mediaQueries.touch);\n  const text = message.text;\n  const textareaRef = useRef<HTMLTextAreaElement>(\n    document.createElement(\"textarea\")\n  );\n\n  const textChanged = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    updateDraft(newTextDraft(message, e.target.value));\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !(e.shiftKey || touch)) {\n      const draft = newTextDraft(message, text);\n      if (isDraftModified(draft)) {\n        sendDraft(draft);\n      }\n      e.preventDefault();\n    }\n    autoExpand(e.target as HTMLTextAreaElement);\n  };\n\n  const emojiInserted = (messageWithEmoji: string) => {\n    updateDraft(newTextDraft(message, messageWithEmoji));\n    textareaRef.current.focus();\n  };\n\n  useEffect(() => {\n    autoExpand(textareaRef.current);\n  }, [textareaRef]);\n\n  return (\n    <Wrapper>\n      <EmojiSuggestion value={text} onSelection={emojiInserted} />\n      <Container>\n        <TextArea\n          ref={textareaRef}\n          rows={1}\n          value={text}\n          onChange={textChanged}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type Message\"\n        />\n        <EmojiInput value={text} onSelection={emojiInserted} />\n        <SendButton\n          onClick={() => isDraftModified(message) && sendDraft(message)}\n        >\n          <SendIcon title=\"Send Message\" />\n        </SendButton>\n      </Container>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: flex-end;\n  position: relative;\n  bottom: 0;\n  border-radius: ${({ theme }) => theme.radii.messageEditor};\n  border: ${({ theme }) => `${theme.borders.light} ${theme.colors.borderDark}`};\n  padding: ${({ theme }) => theme.space[2]};\n`;\n","import React from \"react\";\nimport invariant from \"invariant\";\nimport { DraftMessage } from \"../draft\";\nimport { MessageType } from \"../messageModel\";\nimport { TextMessageEditor } from \"../TextMessageEditor\";\nimport { Wrapper } from \"./MessageEditor.style\";\n\ntype MessageEditorProps = {\n  message: DraftMessage;\n  sendDraft: (message: DraftMessage) => void;\n  updateDraft: (message: DraftMessage) => void;\n};\n\n/**\n * Edit a Draft Message buy selecting the proper editor for the message type\n */\nexport const MessageEditor = ({\n  message,\n  sendDraft,\n  updateDraft\n}: MessageEditorProps) => {\n  switch (message.type) {\n    case MessageType.Text:\n      return (\n        <Wrapper>\n          <TextMessageEditor\n            message={message}\n            sendDraft={sendDraft}\n            updateDraft={updateDraft}\n          ></TextMessageEditor>\n        </Wrapper>\n      );\n\n    // <== Add additional message types here.\n\n    // Don't show anything for an unrecognized message type\n    default:\n      invariant(\n        false,\n        `No editor available for draft message of type \"${message.type}\"`\n      );\n  }\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  left: ${({ theme }) => theme.space[5]};\n  right: ${({ theme }) => theme.space[5]};\n  bottom: ${({ theme }) => theme.space[5]};\n  margin: ${({ theme }) => theme.space[6]};\n  margin-top: ${({ theme }) => theme.space[0]};\n  margin-bottom: ${({ theme }) => theme.space[3]};\n`;\n","export enum RtcCallState {\n  NONE = \"NONE\",\n  DIALING = \"DIALING\",\n  RECEIVING_CALL = \"RECEIVING_CALL\",\n  ACCEPTED = \"ACCEPTED\",\n  MISSED_CALL = \"MISSED_CALL\",\n  CALL_NOT_ANSWERED = \"CALL_NOT_ANSWERED\",\n  OUTGOING_CALL_REJECTED = \"OUTGOING_CALL_REJECTED\",\n  INCOMING_CALL_REJECTED = \"INCOMING_CALL_REJECTED\",\n  OUTGOING_CALL_CONNECTED = \"OUTGOING_CALL_CONNECTED\",\n  INCOMING_CALL_CONNECTED = \"INCOMING_CALL_CONNECTED\",\n  OUTGOING_CALL_COMPLETED = \"OUTGOING_CALL_COMPLETED\",\n  INCOMING_CALL_COMPLETED = \"INCOMING_CALL_COMPLETED\"\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { getMessageDrafts } from \"features/joinedConversations/DraftsModel\";\nimport { updateMessageDraft } from \"features/joinedConversations/updateMessageDraftCommand\";\nimport { discardMessageDraft } from \"features/joinedConversations/discardMessageDraftCommand\";\nimport { sendMessage } from \"features/messages/sendMessage\";\nimport { sendTypingIndicator } from \"features/typingIndicator/sendTypingIndicator\";\nimport { MessageType } from \"features/messages/messageModel\";\nimport { DraftMessage } from \"features/messages/draft\";\nimport { MessageEditor } from \"features/messages/MessageEditor\";\nimport { getCurrentConversationId } from \"../currentConversationModel\";\nimport { Wrapper } from \"./MessageInput.style\";\nimport {\n  TYPING_INDICATOR_DURATION_SECONDS,\n  TypingIndicatorType\n} from \"features/typingIndicator/typingIndicatorModel\";\n\nconst typingIndicators: {\n  [conversationId: string]: boolean;\n} = {};\n\nconst getConversationMessageDraft = createSelector(\n  [getMessageDrafts, getCurrentConversationId],\n  (drafts, conversationId): DraftMessage | undefined => {\n    return drafts[conversationId];\n  }\n);\n\n/**\n * Allow editing and sending messages\n */\nexport const MessageInput = () => {\n  const conversationId: string = useSelector(getCurrentConversationId);\n  const userId: string = useSelector(getLoggedInUserId);\n  const storedDraft: DraftMessage | undefined = useSelector(\n    getConversationMessageDraft\n  );\n  const defaultDraft: DraftMessage = {\n    type: MessageType.Text,\n    senderId: userId,\n    text: \"\"\n  };\n  const message: DraftMessage = storedDraft ? storedDraft : defaultDraft;\n  const dispatch = useDispatch();\n\n  const notifyTyping = () => {\n    if (!typingIndicators[conversationId]) {\n      typingIndicators[conversationId] = true;\n      dispatch(sendTypingIndicator(TypingIndicatorType.ShowTypingIndicator));\n\n      // allow sending additional typing indicators 1 seconds before display duration ends\n      setTimeout(() => {\n        typingIndicators[conversationId] = false;\n      }, (TYPING_INDICATOR_DURATION_SECONDS - 1) * 1000);\n    }\n  };\n\n  const notifyStopTyping = () => {\n    if (typingIndicators[conversationId]) {\n      typingIndicators[conversationId] = false;\n      dispatch(sendTypingIndicator(TypingIndicatorType.HideTypingIndicator));\n    }\n  };\n\n  const send = (appMessage: DraftMessage) => {\n    dispatch(sendMessage(appMessage));\n    dispatch(discardMessageDraft(conversationId));\n    typingIndicators[conversationId] = false;\n  };\n\n  const update = (appMessage: DraftMessage) => {\n    dispatch(updateMessageDraft(conversationId, appMessage));\n\n    if (appMessage.text.length > 0) {\n      notifyTyping();\n    } else {\n      notifyStopTyping();\n    }\n  };\n\n  return (\n    <Wrapper>\n      <MessageEditor\n        message={message}\n        sendDraft={send}\n        updateDraft={update}\n      ></MessageEditor>\n    </Wrapper>\n  );\n};\n","import { ThunkAction } from \"main/storeTypes\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { DraftMessage } from \"./draft\";\nimport { sendMessage as sendPubnubMessage } from \"pubnub-redux\";\n\n/**\n * Send a message to the current conversation\n *\n * This command does not handle failure and leaves the error to the caller\n */\nexport const sendMessage = (message: DraftMessage): ThunkAction => {\n  return (dispatch, getState) => {\n    const state = getState();\n    return dispatch(\n      sendPubnubMessage({\n        channel: getCurrentConversationId(state),\n        message\n      })\n    );\n  };\n};\n","import { ThunkAction } from \"main/storeTypes\";\nimport { MESSAGE_DRAFT_DISCARDED } from \"./DraftsModel\";\n\n/**\n * Remove a message draft from the store for a specific conversation\n */\nexport const discardMessageDraft = (conversationId: string): ThunkAction => {\n  return dispatch => {\n    return dispatch({\n      type: MESSAGE_DRAFT_DISCARDED,\n      payload: {\n        conversationId\n      }\n    });\n  };\n};\n","import { ThunkAction } from \"main/storeTypes\";\nimport { MESSAGE_DRAFT_UPDATED } from \"./DraftsModel\";\nimport { DraftMessage } from \"features/messages/draft\";\n\n/**\n * Indicate that a draft message has been updated\n */\nexport const updateMessageDraft = (\n  conversationId: string,\n  newDraft: DraftMessage\n): ThunkAction => {\n  return dispatch => {\n    return dispatch({\n      type: MESSAGE_DRAFT_UPDATED,\n      payload: {\n        conversationId,\n        value: newDraft\n      }\n    });\n  };\n};\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  padding-left: ${({ theme }) => theme.space[6]};\n  padding-bottom: ${({ theme }) => theme.space[1]};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  color: ${({ theme }) => theme.colors.importantText};\n`;\n","import React from \"react\";\nimport {\n  getTypingIndicatorsById,\n  TypingIndicator,\n  TypingIndicatorEnvelope,\n  TYPING_INDICATOR_DURATION_SECONDS\n} from \"../typingIndicatorModel\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { Wrapper } from \"./TypingIndicatorDisplay.style\";\n\nexport interface TypingIndicatorFragment {\n  sender: {\n    id: string;\n    name: string;\n  };\n  timetoken: string;\n  message: TypingIndicator;\n}\n\nexport const getCurrentConversationTypingIndicators = createSelector(\n  [\n    getTypingIndicatorsById,\n    getCurrentConversationId,\n    getUsersById,\n    getLoggedInUserId\n  ],\n  (\n    typingIndicators,\n    conversationId,\n    users,\n    loggedInUserId\n  ): TypingIndicatorFragment[] => {\n    return typingIndicators[conversationId]\n      ? Object.values(\n          Object.values(typingIndicators[conversationId] || [])\n            .filter(\n              typingIndicator =>\n                typingIndicator.channel === conversationId &&\n                typingIndicator.publisher !== loggedInUserId\n            )\n            .reduce(\n              (\n                grouped: { [key: string]: TypingIndicatorEnvelope },\n                typingIndicator\n              ) => {\n                grouped[typingIndicator.publisher] = typingIndicator;\n                return grouped;\n              },\n              {}\n            )\n        )\n          .filter(\n            typingIndicator =>\n              Date.now() - typingIndicator.timetoken / 10000 <\n              TYPING_INDICATOR_DURATION_SECONDS * 1000\n          )\n          .map(typingIndicator => {\n            return {\n              ...typingIndicator,\n              timetoken: String(typingIndicator.timetoken),\n              sender:\n                users[typingIndicator.publisher || \"\"] ||\n                (typingIndicator.publisher\n                  ? {\n                      id: typingIndicator.publisher,\n                      name: typingIndicator.publisher\n                    }\n                  : {\n                      id: \"unknown\",\n                      name: \"unknown\"\n                    })\n            };\n          })\n      : [];\n  }\n);\n\n/**\n * Display a Message based on its type\n */\nexport const TypingIndicatorDisplay = () => {\n  const typingIndicators: TypingIndicatorFragment[] = useSelector(\n    getCurrentConversationTypingIndicators\n  );\n\n  if (typingIndicators.length === 0) {\n    return <Wrapper>&nbsp;</Wrapper>;\n  } else if (typingIndicators.length === 1) {\n    return <Wrapper>{typingIndicators[0].sender.name} is typing ...</Wrapper>;\n  } else {\n    return <Wrapper>Multiple users typing ...</Wrapper>;\n  }\n};\n","import React from \"react\";\nimport { Wrapper, animatedWrapperVariants } from \"./CurrentConversation.style\";\nimport { Header } from \"../Header\";\nimport { MessageList } from \"../MessageList\";\nimport { MessageInput } from \"../MessageInput\";\nimport { useSelector } from \"react-redux\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { TypingIndicatorDisplay } from \"features/typingIndicator/TypingIndicatorDisplay\";\n\nconst CurrentConversation = () => {\n  const views = useSelector(getViewStates);\n  return (\n    <Wrapper\n      animate={views.CurrentConversation ? \"open\" : \"closed\"}\n      variants={animatedWrapperVariants}\n    >\n      <Header />\n      <MessageList />\n      <MessageInput />\n      <TypingIndicatorDisplay />\n    </Wrapper>\n  );\n};\n\nexport { CurrentConversation };\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  min-height: ${({ theme }) => theme.sizes[3]};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  text-transform: capitalize;\n  color: ${({ theme }) => theme.colors.importantText};\n  :hover {\n    background: ${({ theme }) => theme.backgrounds.contentHover};\n  }\n`;\n\nexport const Body = styled.div`\n  display: flex;\n  max-height: ${({ theme }) => theme.sizes[1]};\n  padding: ${({ theme }) => `${theme.space[0]} ${theme.space[1]}`};\n`;\n\nexport const Name = styled.div`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const Description = styled.div`\n  color: ${({ theme }) => theme.colors.normalText};\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: ${({ theme }) => theme.space[5]};\n  justify-content: space-between;\n`;\n\nexport const IconWrapper = styled.div`\n  padding: ${({ theme }) => `${theme.space[4]} ${theme.space[0]}`};\n`;\n\nexport const ConversationIcon = styled.div<{ color: string }>`\n  border-radius: ${({ theme }) => theme.radii.medium};\n  width: ${({ theme }) => theme.sizes[1]};\n  height: ${({ theme }) => theme.sizes[1]};\n  line-height: ${({ theme }) => theme.sizes[1]};\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  font-size: ${({ theme }) => theme.fontSizes.regular};\n  color: ${({ theme }) => theme.colors.onPrimary};\n  background: ${({ color }) => color};\n`;\n","import React, { useContext } from \"react\";\nimport {\n  Wrapper,\n  Body,\n  ConversationIcon,\n  Name,\n  Description,\n  Content\n} from \"./ConversationDescription.style\";\nimport { ThemeContext } from \"styled-components\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\n\n/**\n * This describes the data that this component needs to display a\n * description of a conversation\n */\nexport interface ConversationDescriptionFragment {\n  id: string;\n  name: string;\n  description: string;\n}\n\n/**\n * Define the properties required to produce a conversation description\n */\ninterface ConversationDescriptionProps {\n  conversation: ConversationDescriptionFragment;\n  onClick: () => void;\n}\n\n/**\n * Display a short desscription of a conversation as it would appear in\n * a list of conversations.  Notify the parent component if a click is\n * detected on the description.\n *\n * Similiar to ConversationItem but with different style and less functionality\n */\nconst ConversationDescription = ({\n  conversation,\n  onClick\n}: ConversationDescriptionProps) => {\n  const theme = useContext(ThemeContext);\n  const color = getUniqueColor(\n    conversation.name,\n    (theme.colors.avatars as unknown) as string[]\n  );\n  return (\n    <Wrapper onClick={onClick}>\n      <Body>\n        <ConversationIcon color={color}>#</ConversationIcon>\n        <Content>\n          <Name>{conversation.name}</Name>\n          <Description>{conversation.description}</Description>\n        </Content>\n      </Body>\n    </Wrapper>\n  );\n};\n\nexport { ConversationDescription };\n","import styled from \"styled-components/macro\";\n\nexport const ScrollView = styled.section`\n  text-align: left;\n  overflow-y: scroll;\n  > div {\n    border-top: ${({ theme }) =>\n      `${theme.borders.light} ${theme.colors.neutral[1]}`};\n    border-bottom: ${({ theme }) =>\n      `${theme.borders.light} ${theme.colors.neutral[1]}`};\n  }\n`;\n\nexport const CloseButton = styled.div`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.normalText};\n  ${({ theme }) => theme.mediaQueries.medium} {\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ theme }) => `${theme.space[8]} ${theme.space[3]}`};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    padding: ${({ theme }) => theme.space[0]};\n    padding-bottom: ${({ theme }) => theme.space[8]};\n  }\n`;\n\nexport const Title = styled.div`\n  font-size: ${({ theme }) => theme.fontSizes.large};\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  text-align: left;\n  color: ${({ theme }) => theme.colors.importantText};\n`;\n","import styled from \"styled-components/macro\";\nimport { motion } from \"framer-motion\";\n\nexport const Overlay = styled.div<{ displayed: boolean }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: ${({ displayed }) => (displayed ? \"flex\" : \"none\")};\n  z-index: 200;\n  width: 100%;\n  height: 100%;\n  background: ${({ theme }) => theme.backgrounds.panel};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    padding: 10% 15%;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n  ${({ theme }) => theme.mediaQueries.large} {\n    padding: 10% 25%;\n  }\n`;\n\nexport const Modal = styled(motion.section)`\n  z-index: 300;\n  box-shadow: ${({ theme }) => theme.shadows[1]};\n  border-radius: ${({ theme }) => theme.radii.square};\n  width: 100%;\n  height: 100%;\n  padding: ${({ theme }) => theme.space[0]};\n  text-align: center;\n  flex-direction: column;\n  overflow: auto;\n  background: ${({ theme }) => theme.backgrounds.panel};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    border-radius: ${({ theme }) => theme.radii.strong};\n    padding: ${({ theme }) => theme.space[8]};\n  }\n`;\n\nexport const getAnimatedModalVariants = (isMedium: boolean) => ({\n  open: {\n    y: \"0%\",\n    display: \"flex\"\n  },\n  closed: {\n    y: isMedium ? \"-200%\" : \"50%\",\n    transitionEnd: {\n      display: \"none\"\n    }\n  }\n});\n","import React, { useContext } from \"react\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport {\n  ConversationDescription,\n  ConversationDescriptionFragment\n} from \"../ConversationDescription\";\nimport {\n  getConversationsByUserId,\n  MembershipHash\n} from \"../joinedConversationModel\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport {\n  ScrollView,\n  CloseButton,\n  Title,\n  Header\n} from \"./JoinConversationDialog.style\";\nimport {\n  Overlay,\n  Modal,\n  getAnimatedModalVariants\n} from \"foundations/components/Modal\";\nimport { createSelector } from \"reselect\";\nimport {\n  getAllConversations,\n  Conversation\n} from \"features/conversations/conversationModel\";\nimport { joinConversation } from \"../joinConversationCommand\";\nimport { joinConversationViewHidden } from \"features/layout/LayoutActions\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\n// Fetch all conversations and remove the ones we're already a member of\nconst getJoinableConversations = createSelector(\n  [getAllConversations, getLoggedInUserId, getConversationsByUserId],\n  (\n    conversations: Conversation[],\n    userId: string,\n    joinedConversations: MembershipHash\n  ): ConversationDescriptionFragment[] => {\n    return conversations.filter(conversation => {\n      return !joinedConversations[userId]\n        .map(conv => conv.id)\n        .includes(conversation.id);\n    });\n  }\n);\n\n/**\n * Present list to the user of conversations that they could join, but have not.\n * Allow the user to select the conversation to join or back out.\n *\n * TODO: This renders unconditionally as display:none so it will fetch the\n * list of conversations to join when the UI is rendered even if the user has not\n * opened the dialog.\n */\nconst JoinConversationDialog = () => {\n  const conversations: ConversationDescriptionFragment[] = useSelector(\n    getJoinableConversations\n  );\n  const views = useSelector(getViewStates);\n  const currentUserId = useSelector(getLoggedInUserId);\n  const dispatch = useDispatch();\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n\n  return (\n    <Overlay displayed={views.JoinConversation}>\n      <Modal\n        animate={views.JoinConversation ? \"open\" : \"closed\"}\n        variants={getAnimatedModalVariants(isMedium)}\n      >\n        <Header>\n          <Title>Join a Conversation</Title>\n          <CloseButton\n            onClick={() => {\n              dispatch(joinConversationViewHidden());\n            }}\n          >\n            <CrossIcon color={theme.colors.normalText} title=\"close\" />\n          </CloseButton>\n        </Header>\n        <ScrollView>\n          {conversations.map(conversation => (\n            <ConversationDescription\n              key={`conversationDescription-${conversation.id}`}\n              onClick={() => {\n                const conversationId = conversation.id;\n                dispatch(joinConversation(currentUserId, conversationId));\n                dispatch(joinConversationViewHidden());\n              }}\n              conversation={conversation}\n            />\n          ))}\n        </ScrollView>\n      </Modal>\n    </Overlay>\n  );\n};\n\nexport { JoinConversationDialog };\n","import { ThunkAction } from \"main/storeTypes\";\nimport { joinSpaces } from \"pubnub-redux\";\nimport { focusOnConversation } from \"features/currentConversation/currentConversationModel\";\n\n/**\n * Join a conversation.\n * The membership in the conversation will be stored.\n * The channel for the converstation will be subscribed to to receive messages.\n * The new conversation will be made the selected conversation\n */\nexport const joinConversation = (\n  userId: string,\n  conversationId: string\n): ThunkAction<Promise<void>> => {\n  return (dispatch, getState, context) => {\n    return dispatch(\n      joinSpaces({\n        userId: userId,\n        spaces: [{ id: conversationId }]\n      })\n    ).then(() => {\n      context.pubnub.api.subscribe({\n        channels: [conversationId],\n        withPresence: true\n      });\n      dispatch(focusOnConversation(conversationId));\n    });\n  };\n};\n","import styled from \"styled-components/macro\";\n\nexport const UserName = styled.span`\n  padding-right: ${({ theme }) => theme.space[1]};\n`;\n\nexport const ScrollView = styled.section`\n  text-align: left;\n  overflow-y: scroll;\n  > div {\n    border-top: ${({ theme }) =>\n      `${theme.borders.light} ${theme.colors.neutral[1]}`};\n    border-bottom: ${({ theme }) =>\n      `${theme.borders.light} ${theme.colors.neutral[1]}`};\n  }\n`;\n\nexport const CloseButton = styled.div`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.normalText};\n  ${({ theme }) => theme.mediaQueries.medium} {\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ theme }) => `${theme.space[8]} ${theme.space[3]}`};\n  ${({ theme }) => theme.mediaQueries.medium} {\n    padding: ${({ theme }) => theme.space[0]};\n    padding-bottom: ${({ theme }) => theme.space[8]};\n  }\n`;\n\nexport const Title = styled.div`\n  padding: 10px;\n  display: flex;\n  align-items: center;\n  background: ${({ theme }) => theme.backgrounds.primary};\n  color: ${({ theme }) => theme.colors.onPrimary};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  text-align: left;\n`;\n\nexport const Call = styled.div<{ isConnected: boolean }>`\n  cursor: pointer;\n  color: ${({ theme, isConnected }) =>\n    isConnected ? theme.colors.primary[0] : theme.colors.neutral[3]};\n  background: ${({ theme, isConnected }) =>\n    isConnected ? theme.colors.neutral[1] : theme.colors.neutral[4]};\n  border-radius: 5px;\n  border: 1px solid #9b9b9b;\n  padding: 12px;\n`;\n","import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { AppActions } from \"../../main/AppActions\";\nimport { RtcCallState } from \"./RtcCallState\";\n\n// both incoming and outgoing calls\nexport const CALL_REJECTED = \"CALL_REJECTED\";\nexport const CALL_CONNECTED = \"CALL_CONNECTED\";\nexport const CALL_COMPLETED = \"CALL_COMPLETED\";\n\n// only outgoing calls\nexport const CALL_SIGNAL_SENT = \"CALL_SIGNAL_SENT\";\nexport const CALL_NOT_ANSWERED = \"CALL_NOT_ANSWERED\";\n\n// only incoming calls\nexport const CALL_ACCEPTED = \"CALL_ACCEPTED\";\nexport const CALL_SIGNAL_RECEIVED = \"CALL_SIGNAL_RECEIVED\";\nexport const CALL_MISSED = \"CALL_MISSED\";\n\nexport interface RtcCallInfo {\n  callState: RtcCallState;\n  peerUserId: string;\n  startTime: number;\n  endTime?: number;\n  completed?: boolean;\n  missed?: boolean;\n  notAnswered?: boolean;\n  rejected?: boolean;\n}\n\nexport interface RtcState {\n  currentCall: RtcCallInfo;\n  lastIncomingCall: RtcCallInfo;\n  callLog: RtcCallInfo[];\n}\n\nconst initialState: RtcState = {\n  currentCall: { callState: RtcCallState.NONE, peerUserId: \"\", startTime: 0 },\n  lastIncomingCall: {\n    callState: RtcCallState.NONE,\n    peerUserId: \"\",\n    startTime: 0\n  },\n  callLog: []\n};\n\nexport const callSignalSent = (\n  userId: string,\n  startTime: number\n): callSignalSentAction => ({\n  type: CALL_SIGNAL_SENT,\n  payload: {\n    userId,\n    startTime\n  }\n});\n\nexport const callSignalReceived = (\n  userId: string,\n  startTime: number\n): callSignalReceivedAction => ({\n  type: CALL_SIGNAL_RECEIVED,\n  payload: {\n    userId,\n    startTime\n  }\n});\n\nexport const callAccepted = (\n  userId: string,\n  startTime: number\n): callAcceptedAction => ({\n  type: CALL_ACCEPTED,\n  payload: {\n    userId,\n    startTime\n  }\n});\n\nexport const callMissed = (endTime: number): callMissedAction => ({\n  type: CALL_MISSED,\n  payload: {\n    endTime\n  }\n});\n\nexport const callNotAnswered = (endTime: number): callNotAnsweredAction => ({\n  type: CALL_NOT_ANSWERED,\n  payload: {\n    endTime\n  }\n});\n\nexport const callRejected = (\n  status: RtcCallState,\n  endTime: number\n): callRejectedAction => ({\n  type: CALL_REJECTED,\n  payload: {\n    status,\n    endTime\n  }\n});\n\nexport const callConnected = (status: RtcCallState): callConnectedAction => ({\n  type: CALL_CONNECTED,\n  payload: {\n    status\n  }\n});\n\nexport const callCompleted = (\n  status: RtcCallState,\n  endTime: number\n): callCompletedAction => ({\n  type: CALL_COMPLETED,\n  payload: {\n    status,\n    endTime\n  }\n});\n\ntype callSignalSentPayloadType = {\n  userId: string;\n  startTime: number;\n};\n\ntype callSignalReceivedPayloadType = {\n  userId: string;\n  startTime: number;\n};\n\ntype callAcceptedPayloadType = {\n  userId: string;\n  startTime: number;\n};\n\ntype callRejectedPayloadType = {\n  status: RtcCallState;\n  endTime: number;\n};\n\ntype callMissedPayloadType = {\n  endTime: number;\n};\n\ntype callNotAnsweredPayloadType = {\n  endTime: number;\n};\n\ntype callConnectedPayloadType = {\n  status: RtcCallState;\n};\n\ntype callCompletedPayloadType = {\n  status: RtcCallState;\n  endTime: number;\n};\nexport interface callSignalSentAction {\n  type: typeof CALL_SIGNAL_SENT;\n  payload: callSignalSentPayloadType;\n}\n\nexport interface callSignalReceivedAction {\n  type: typeof CALL_SIGNAL_RECEIVED;\n  payload: callSignalReceivedPayloadType;\n}\n\nexport interface callAcceptedAction {\n  type: typeof CALL_ACCEPTED;\n  payload: callAcceptedPayloadType;\n}\n\nexport interface callRejectedAction {\n  type: typeof CALL_REJECTED;\n  payload: callRejectedPayloadType;\n}\n\nexport interface callMissedAction {\n  type: typeof CALL_MISSED;\n  payload: callMissedPayloadType;\n}\nexport interface callNotAnsweredAction {\n  type: typeof CALL_NOT_ANSWERED;\n  payload: callNotAnsweredPayloadType;\n}\nexport interface callConnectedAction {\n  type: typeof CALL_CONNECTED;\n  payload: callConnectedPayloadType;\n}\n\nexport interface callCompletedAction {\n  type: typeof CALL_COMPLETED;\n  payload: callCompletedPayloadType;\n}\n\nconst RtcStateReducer = (\n  state: RtcState = initialState,\n  action: AppActions\n): RtcState => {\n  switch (action.type) {\n    case CALL_SIGNAL_SENT: {\n      return {\n        ...state,\n        currentCall: {\n          peerUserId: action.payload.userId,\n          callState: RtcCallState.DIALING,\n          startTime: action.payload.startTime\n        }\n      };\n    }\n    case CALL_SIGNAL_RECEIVED: {\n      if (\n        state.currentCall.callState === RtcCallState.OUTGOING_CALL_CONNECTED ||\n        state.currentCall.callState === RtcCallState.INCOMING_CALL_CONNECTED\n      ) {\n        // TODO: currently calls received while already in a call will be ignored\n        // we may want to add the ability to end the current call and accept the new one\n\n        const newCall = {\n          peerUserId: action.payload.userId,\n          callState: RtcCallState.RECEIVING_CALL,\n          startTime: action.payload.startTime,\n          missed: true\n        };\n\n        return {\n          ...state,\n          lastIncomingCall: newCall,\n          callLog: [...state.callLog, newCall]\n        };\n      }\n\n      const newCall = {\n        peerUserId: action.payload.userId,\n        callState: RtcCallState.RECEIVING_CALL,\n        startTime: action.payload.startTime\n      };\n\n      return {\n        ...state,\n        lastIncomingCall: newCall\n      };\n    }\n    case CALL_ACCEPTED: {\n      const currentCall = {\n        ...state.lastIncomingCall,\n        startTime: action.payload.startTime,\n        callState: RtcCallState.ACCEPTED\n      };\n\n      return {\n        ...state,\n        currentCall\n      };\n    }\n    case CALL_REJECTED: {\n      const currentCall = {\n        ...state.currentCall,\n        endTime: action.payload.endTime,\n        callState: action.payload.status,\n        rejected: true\n      };\n\n      return {\n        ...state,\n        currentCall,\n        callLog: [...state.callLog, currentCall]\n      };\n    }\n    case CALL_MISSED: {\n      const currentCall = {\n        ...state.currentCall,\n        endTime: action.payload.endTime,\n        callState: RtcCallState.MISSED_CALL,\n        missed: true\n      };\n\n      return {\n        ...state,\n        currentCall,\n        callLog: [...state.callLog, currentCall]\n      };\n    }\n    case CALL_NOT_ANSWERED: {\n      const currentCall = {\n        ...state.currentCall,\n        endTime: action.payload.endTime,\n        callState: RtcCallState.CALL_NOT_ANSWERED,\n        notAnswered: true\n      };\n\n      return {\n        ...state,\n        currentCall,\n        callLog: [...state.callLog, currentCall]\n      };\n    }\n    case CALL_CONNECTED: {\n      const currentCall = {\n        ...state.currentCall,\n        callState: action.payload.status\n      };\n\n      return {\n        ...state,\n        currentCall\n      };\n    }\n    case CALL_COMPLETED: {\n      const currentCall = {\n        ...state.currentCall,\n        callState: action.payload.status,\n        completed: true\n      };\n\n      return {\n        ...state,\n        currentCall,\n        callLog: [...state.callLog, currentCall]\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst getRtcStateSlice = (state: AppState) => state.rtc;\n\nexport const getCurrentCall = createSelector(\n  getRtcStateSlice,\n  (rtc: RtcState): RtcCallInfo => {\n    return rtc.currentCall;\n  }\n);\n\nexport const getLastIncommingCall = createSelector(\n  getRtcStateSlice,\n  (rtc: RtcState): RtcCallInfo => {\n    return rtc.lastIncomingCall;\n  }\n);\n\nexport { RtcStateReducer };\n","import React, { useContext } from \"react\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport {\n  Call,\n  CloseButton,\n  Title,\n  Header,\n  UserName\n} from \"./UserDetailDialog.style\";\nimport {\n  Overlay,\n  Modal,\n  getAnimatedModalVariants\n} from \"foundations/components/Modal\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport {\n  rtcViewDisplayed,\n  userDetailViewHidden\n} from \"../../layout/LayoutActions\";\nimport { getSelectedUserId } from \"../userDetailModel\";\nimport { getUsersById } from \"../../users/userModel\";\nimport { PresenceIndicatorIcon } from \"../../../foundations/components/icons/PresenceIndicatorIcon\";\nimport { getPresenceByConversationId } from \"features/memberPresence/memberPresenceModel\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { callSignalSent } from \"../../rtc/RtcModel\";\nimport { getLoggedInUserId } from \"../../authentication/authenticationModel\";\n\nconst UserDetailDialog = () => {\n  const dispatch = useDispatch();\n  const views = useSelector(getViewStates);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n  const loggedInUserId = useSelector(getLoggedInUserId);\n  const selectedUserId = useSelector(getSelectedUserId);\n  const usersById = useSelector(getUsersById);\n  const currentConversationId = useSelector(getCurrentConversationId);\n  const presenceByConversationId = useSelector(getPresenceByConversationId);\n  const user = usersById[selectedUserId];\n  const userName = user ? user.name : \"\";\n  const present = presenceByConversationId[currentConversationId];\n  const isConnected =\n    present &&\n    present.occupants.filter(occupant => {\n      return occupant.uuid === selectedUserId;\n    }).length > 0;\n\n  const initiateCall = () => {\n    dispatch(callSignalSent(user.id, new Date().getTime()));\n    dispatch(rtcViewDisplayed());\n  };\n\n  return (\n    <Overlay displayed={views.UserDetail}>\n      <Modal\n        animate={views.UserDetail ? \"open\" : \"closed\"}\n        variants={getAnimatedModalVariants(isMedium)}\n      >\n        <Header>\n          <Title>\n            <UserName>{userName}</UserName>\n            {isConnected && (\n              <PresenceIndicatorIcon\n                size={7}\n                title={isConnected ? \"connected\" : \"not connected\"}\n                active={isConnected}\n              />\n            )}\n          </Title>\n          <CloseButton\n            onClick={() => {\n              dispatch(userDetailViewHidden());\n            }}\n          >\n            <CrossIcon color={theme.colors.normalText} title=\"close\" />\n          </CloseButton>\n        </Header>\n        {loggedInUserId !== selectedUserId && (\n          <Call isConnected={isConnected} onClick={initiateCall}>\n            Initiate a call\n            {isConnected || \" (\" + userName + \" may not be online)\"}\n          </Call>\n        )}\n        {loggedInUserId === selectedUserId && <div>My Profile</div>}\n      </Modal>\n    </Overlay>\n  );\n};\n\nexport { UserDetailDialog };\n","import styled from \"styled-components/macro\";\n\nexport const Wrapper = styled.div<{ displayed: boolean }>`\n  z-index: 1000;\n  position: fixed;\n  background: black;\n  color: white;\n  line-height: normal;\n  display: ${({ theme, displayed }) => (displayed ? \"flex\" : \"none\")};\n  flex-direction: column;\n`;\n\nexport const VideoWrapper = styled.div`\n  resize: both;\n  overflow: auto;\n  width: 100%;\n  height: 100%;\n  & video {\n    margin: -2px;\n    padding: 2px;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const CloseButton = styled.div`\n  margin-top: 2px;\n  margin-right: 2px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.normalText};\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  border-bottom-color: ${({ theme }) => theme.colors.neutral[3]};\n`;\n\nexport const Body = styled.div``;\n\nexport const Title = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  display: flex;\n  align-items: center;\n  background: ${({ theme }) => theme.backgrounds.primary};\n  color: ${({ theme }) => theme.colors.onPrimary};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  font-family: ${({ theme }) => theme.fonts.app};\n  font-weight: ${({ theme }) => theme.fontWeights.medium};\n  text-align: left;\n`;\n","interface RtcState {\n  peerConnection?: RTCPeerConnection;\n}\n\nlet state: RtcState = {\n  peerConnection: undefined\n};\n\nexport const createPeerConnection = (\n  iceConfig: RTCIceServer[]\n): RTCPeerConnection => {\n  state.peerConnection = new RTCPeerConnection({\n    bundlePolicy: \"max-compat\",\n    rtcpMuxPolicy: \"negotiate\",\n    iceServers: iceConfig\n  });\n\n  state.peerConnection.onicegatheringstatechange = event => {\n    console.log(\"onicegatheringstatechange\", event);\n  };\n  state.peerConnection.oniceconnectionstatechange = event => {\n    console.log(\"oniceconnectionstatechange\", event);\n  };\n  state.peerConnection.onconnectionstatechange = event => {\n    console.log(\"onconnectionstatechange\", event);\n  };\n  state.peerConnection.onsignalingstatechange = event => {\n    console.log(\"onsignalingstatechange\", event);\n  };\n\n  return state.peerConnection;\n};\n\nexport const getUserMedia = () => {};\n\nexport const createOffer = () => {};\n\nexport const setLocalDescription = () => {};\n\nexport const sendCandidate = () => {};\n\nexport const handleAnswer = () => {};\n\nexport const setRemoteDescription = () => {};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport {\n  Wrapper,\n  VideoWrapper,\n  Header,\n  Body,\n  Title,\n  CloseButton\n} from \"./RtcDisplay.style\";\nimport { ThemeContext } from \"styled-components\";\nimport { getViewStates } from \"../../layout/Selectors\";\nimport { rtcViewHidden, rtcViewDisplayed } from \"../../layout/LayoutActions\";\nimport {\n  getCurrentCall,\n  callSignalReceived,\n  callCompleted,\n  getLastIncommingCall,\n  callAccepted\n} from \"../RtcModel\";\nimport { RtcCallState } from \"../RtcCallState\";\nimport { sendMessage as sendPubnubMessage } from \"pubnub-redux\";\nimport { MessageType, getMessagesById } from \"../../messages/messageModel\";\nimport { getUsersById } from \"../../users/userModel\";\nimport { createSelector } from \"reselect\";\nimport { getLoggedInUserId } from \"../../authentication/authenticationModel\";\nimport { callConnected } from \"../RtcModel\";\nimport RtcSettings from \"config/rtcSettings.json\";\nimport { createPeerConnection } from \"../Rtc\";\nimport { usePubNub } from \"pubnub-react\";\nimport Pubnub from \"pubnub\";\n\nconst ICE_CONFIG = RtcSettings.rtcIceConfig;\nconst DIALING_TIMEOUT_SECONDS = RtcSettings.rtcDialingTimeoutSeconds;\n\n// TODO: figure out how to handle peer connections in a clean way\nconst state: any = {\n  peerConnection: undefined,\n  pendingIceCandidates: [],\n  offerPart1: '',\n  answerPart1: ''\n};\n\nexport const getLastCallMessage = createSelector(\n  [getMessagesById, getLoggedInUserId, getUsersById],\n  (messages, userId, users): any => {\n    let userMessages = messages[userId]\n      ? Object.values(messages[userId])\n          .filter(message => message.channel === userId)\n          .map((message): any => {\n            return {\n              ...message.message,\n              timetoken: String(message.timetoken),\n              sender:\n                users[message.message.senderId] ||\n                (message.message.senderId\n                  ? {\n                      id: message.message.senderId,\n                      name: message.message.senderId\n                    }\n                  : {\n                      id: \"unknown\",\n                      name: \"unknown\"\n                    })\n            };\n          })\n      : [];\n\n    return userMessages.length > 0\n      ? userMessages[userMessages.length - 1]\n      : undefined;\n  }\n);\n\nlet pubnubIceListener: Pubnub.ListenerParameters = {};\n\nconst RtcDisplay = () => {\n  const pubnub = usePubNub();\n  const [video, setVideo] = useState(true);\n  const [audio, setAudio] = useState(true);\n  const [dialed, setDialed] = useState(false);\n  const [answered, setAnswered] = useState(false);\n  const [peerAnswered, setPeerAnswered] = useState(false);\n  const dispatch = useDispatch();\n  const currentCall = useSelector(getCurrentCall);\n  const lastIncommingCall = useSelector(getLastIncommingCall);\n  const lastCallMessage = useSelector(getLastCallMessage);\n  const views = useSelector(getViewStates);\n  const myId = useSelector(getLoggedInUserId);\n  const theme = useContext(ThemeContext);\n\n  pubnub.removeListener(pubnubIceListener);\n  pubnub.addListener(pubnubIceListener);\n\n  pubnubIceListener.message = async message => {\n    if (message.message.candidate === null) {\n      // add last candidate\n      await state.peerConnection.addIceCandidate({\n        candidate: \"\",\n        sdpMid: \"0\",\n        sdpMLineIndex: 0\n      });\n    } else if (\n      message.message.candidate &&\n      message.message.candidate.candidate\n    ) {\n      // we got an ice candidate from a peer\n      console.log(\"candidate received from peer\", message.message.candidate);\n\n      if (\n        state.peerConnection &&\n        state.peerConnection.connectionState !== \"closed\"\n      ) {\n        try {\n          // let iceCandidate = new RTCIceCandidate(message.message.candidate);\n          await state.peerConnection.addIceCandidate(message.message.candidate);\n        } catch (e) {\n          console.log(\"condidate: error setting ice candidate: \", e);\n        }\n      } else {\n        // some ice candidates are sent before the offer is answered\n        state.pendingIceCandidates.push(message.message.candidate);\n      }\n    }\n\n    if (message.message.offer1) {\n      state.offerPart1 = message.message.offer1;\n    }\n\n    if (message.message.offer2) {\n      // we got an ice offer from a peer\n\n      initPeerConnection();\n\n      const offer = {\n        type: \"offer\",\n        sdp: state.offerPart1 + message.message.offer2\n      };\n      state.offerPart1  = \"\";\n\n      console.log(\"offer received from peer\", offer);\n      try {\n        await state.peerConnection.setRemoteDescription(offer);\n      } catch (e) {\n        console.log(\"offer: error setting remote desc: \", e);\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio,\n        video\n      });\n\n      console.log(\"offer: adding tracks\");\n\n      stream\n        .getTracks()\n        .forEach(track => state.peerConnection.addTrack(track, stream));\n\n      const answer = await state.peerConnection.createAnswer({\n        offerToReceiveVideo: true,\n        offerToReceiveAudio: true\n      });\n\n      try {\n        await state.peerConnection.setLocalDescription(answer);\n      } catch (e) {\n        console.log(\"offer: error setting local desc: \", e);\n      }\n\n      // apply pending ice candidates\n      state.pendingIceCandidates.forEach((candidate: any) => {\n        state.peerConnection.addIceCandidate(candidate);\n      });\n      state.pendingIceCandidates.slice(0, state.pendingIceCandidates.length);\n\n      sendAnswer();\n    }\n\n\n    if (message.message.answer1) {\n      state.answerPart1 = message.message.answer1;\n    }\n\n    if (message.message.answer2) {\n      // we got an ice answer from a peer\n      console.log(\"answer: answer received from peer\", message.message.answer);\n\n      const answer = {\n        type: \"answer\",\n        sdp: state.answerPart1 + message.message.answer2\n      };\n      \n      state.answerPart1 = \"\";\n\n      try {\n        await state.peerConnection.setRemoteDescription(answer);\n      } catch (e) {\n        console.log(\"answer: error setting remote desc: \", e);\n      }\n    }\n  };\n\n  const initPeerConnection = () => {\n    state.peerConnection = createPeerConnection(ICE_CONFIG);\n\n    // send ice candidates to peer\n    state.peerConnection.onicecandidate = (event: any) => {\n      console.log(\"candidate sent to peer\");\n\n      console.log(\"candidate: sending candidate \", event);\n      console.log(\n        \"candidate: ice candidate length \",\n        event.candidate &&\n          event.candidate.candidate &&\n          event.candidate.candidate.length\n      );\n\n      pubnub.publish({\n        channel: currentCall.peerUserId,\n        sendByPost: true,\n        message: {\n          candidate: event.candidate\n        }\n      });\n    };\n\n    state.peerConnection.ontrack = (e: any) => {\n      console.log(\"on track received\");\n      if (\n        (document.querySelector(\"#remotevideo\") as any).srcObject !==\n        e.streams[0]\n      ) {\n        (document.querySelector(\"#remotevideo\") as any).srcObject =\n          e.streams[0];\n      }\n    };\n\n    state.peerConnection.onconnectionstatechange = async (e: any) => {\n      console.log(\n        \"onconnectionstatechange\",\n        state.peerConnection.connectionState\n      );\n    };\n\n    state.peerConnection.onnegotiationneeded = async () => {\n      console.log(\"negotiation: on negotiation needed\");\n      const offer = await state.peerConnection.createOffer({\n        offerToReceiveVideo: true,\n        offerToReceiveAudio: true\n      });\n\n      console.log(\"negotiation: attempting local offer\", offer);\n\n      try {\n        await state.peerConnection.setLocalDescription(offer);\n      } catch (e) {\n        console.log(\"negotiation: error setting local desc: \", e);\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio,\n        video\n      });\n\n      console.log(\"negotiation: adding tracks\");\n\n      stream\n        .getTracks()\n        .forEach(track => state.peerConnection.addTrack(track, stream));\n\n      console.log(\n        \"negotiation: offer length\",\n        state.peerConnection.localDescription?.toJSON().length\n      );\n\n      sendOffer();\n    };\n  };\n\n  const sendOffer = () => {\n    console.log(\n      \"sendOffer: sending offer\",\n      state.peerConnection.localDescription\n    );\n\n    const sdp = state.peerConnection.localDescription?.sdp;\n    console.log(\"sendOffer: offer length\", sdp && sdp.length);\n    console.log(\"sendOffer: sending local offer to peer\", sdp);\n\n    if (sdp) {\n      const halfLength = Math.floor(sdp.length / 2);\n      const part1 = sdp.slice(0, halfLength);\n      const part2 = sdp.slice(halfLength);\n\n      pubnub\n        .publish({\n          channel: currentCall.peerUserId,\n          sendByPost: true,\n          message: {\n            offer1: part1\n          }\n        })\n        .then(() => {\n          pubnub.publish({\n            channel: currentCall.peerUserId,\n            sendByPost: true,\n            message: {\n              offer2: part2\n            }\n          });\n        });\n    }\n  };\n\n  const sendAnswer = () => {\n    console.log(\n      \"sendAnswer: sending answer\",\n      state.peerConnection.localDescription\n    );\n\n    const sdp = state.peerConnection.localDescription?.sdp;\n    console.log(\"sendAnswer: answer length\", sdp && sdp.length);\n    console.log(\"sendAnswer: sending local answer to peer\", sdp);\n\n    if (sdp) {\n      const halfLength = Math.floor(sdp.length / 2);\n      const part1 = sdp.slice(0, halfLength);\n      const part2 = sdp.slice(halfLength);\n\n      pubnub\n        .publish({\n          channel: currentCall.peerUserId,\n          sendByPost: true,\n          message: {\n            answer1: part1\n          }\n        })\n        .then(() => {\n          pubnub.publish({\n            channel: currentCall.peerUserId,\n            sendByPost: true,\n            message: {\n              answer2: part2\n            }\n          });\n        });\n    }\n  }\n\n  const disableVideo = () => {\n    (document.querySelector(\"#myvideo\") as any).srcObject &&\n      (document.querySelector(\"#myvideo\") as any).srcObject\n        .getTracks()\n        .forEach((track: MediaStreamTrack) => {\n          track.stop();\n        });\n    (document.querySelector(\"#myvideo\") as any).srcObject = undefined;\n\n    (document.querySelector(\"#remotevideo\") as any).srcObject &&\n      (document.querySelector(\"#remotevideo\") as any).srcObject\n        .getTracks()\n        .forEach((track: MediaStreamTrack) => {\n          track.stop();\n        });\n    (document.querySelector(\"#remotevideo\") as any).srcObject = undefined;\n    setVideo(false);\n  };\n\n  const disableAudio = () => {\n    setAudio(false);\n  };\n\n  const disableMedia = () => {\n    disableVideo();\n    disableAudio();\n  };\n\n  const enableVideo = async (mediaConstraints: MediaStreamConstraints) => {\n    let stream = await navigator.mediaDevices.getUserMedia({\n      ...mediaConstraints,\n      audio: false\n    });\n\n    (document.querySelector(\"#myvideo\") as any).srcObject = stream;\n  };\n\n  const enableAudio = async (mediaConstraints: MediaStreamConstraints) => {};\n\n  const updateMedia = (mediaConstraints: MediaStreamConstraints) => {\n    if (mediaConstraints.video) {\n      enableVideo(mediaConstraints);\n    } else if (mediaConstraints.audio) {\n      enableAudio(mediaConstraints);\n    } else {\n      disableMedia();\n    }\n  };\n\n  const toggleVideo = () => {\n    updateMedia({ audio, video: !video });\n    setVideo(!video);\n  };\n\n  const toggleAudio = () => {\n    updateMedia({ audio: !audio, video });\n    setAudio(!audio);\n  };\n\n  const answerCall = () => {\n    console.log(\"answer call\");\n    setAnswered(true);\n    updateMedia({ audio, video });\n\n    dispatch(\n      callAccepted(lastCallMessage.sender.id, lastCallMessage.startTime)\n    );\n    dispatch(callConnected(RtcCallState.INCOMING_CALL_CONNECTED));\n\n    console.log(\"answer: sending answer\", lastCallMessage.sender.id);\n\n    dispatch(\n      sendPubnubMessage({\n        channel: lastCallMessage.sender.id,\n        sendByPost: true,\n        message: {\n          type: MessageType.Rtc,\n          callState: RtcCallState.OUTGOING_CALL_CONNECTED,\n          startTime: lastCallMessage.startTime,\n          senderId: myId\n        }\n      })\n    );\n  };\n\n  useEffect(() => {\n    const callUser = async () => {\n      console.log(\"calling \" + currentCall.peerUserId);\n      setDialed(true);\n\n      console.log(\"calluser: calling\", currentCall.peerUserId);\n\n      dispatch(\n        sendPubnubMessage({\n          channel: currentCall.peerUserId,\n          sendByPost: true,\n          message: {\n            type: MessageType.Rtc,\n            callState: RtcCallState.DIALING,\n            startTime: currentCall.startTime,\n            senderId: myId\n          }\n        })\n      );\n    };\n\n    const incomingCall = async () => {\n      console.log(\"receiving\");\n      dispatch(\n        callSignalReceived(lastCallMessage.sender.id, lastCallMessage.startTime)\n      );\n      dispatch(rtcViewDisplayed());\n    };\n\n    const outgoingCallAccepted = async () => {\n      console.log(\"accepted: outgoing call accepted\");\n      setPeerAnswered(true);\n      updateMedia({ audio, video });\n      dispatch(callConnected(RtcCallState.OUTGOING_CALL_CONNECTED));\n\n      initPeerConnection();\n\n      const offer = await state.peerConnection.createOffer({\n        offerToReceiveVideo: true,\n        offerToReceiveAudio: true\n      });\n\n      console.log(\"accepted: attempting local offer\", offer);\n\n      try {\n        await state.peerConnection.setLocalDescription(offer);\n      } catch (e) {\n        console.log(\"accepted: error setting local desc: \", e);\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio,\n        video\n      });\n\n      console.log(\"accepted: adding tracks\");\n\n      stream\n        .getTracks()\n        .forEach(track => state.peerConnection.addTrack(track, stream));\n\n      sendOffer();\n    };\n\n    const callEnded = async (callState: RtcCallState, endTime: number) => {\n      console.log(\"peer ended\");\n      setDialed(false);\n      dispatch(callCompleted(callState, endTime));\n      closeMedia();\n      state.peerConnection && state.peerConnection.close();\n      // state.peerConnection = new RTCPeerConnection();\n      // state.peerConnection.close(); /// leave with emp\n    };\n\n    // console.log('---');\n    // console.log('current user', myId);\n    // console.log('peer user', currentCall.peerUserId);\n    // console.log('starttime', currentCall.startTime);\n    // console.log('last incomming call: ', lastIncommingCall.startTime);\n    // console.log('last call message: ', lastCallMessage && lastCallMessage.startTime);\n    // console.log('dialed', dialed)\n    // console.log('peerAnswered', peerAnswered)\n    // console.log(lastCallMessage)\n    // console.log(currentCall)\n    // console.log('---');\n\n    if (!dialed && currentCall.callState === RtcCallState.DIALING) {\n      // if calling\n      callUser();\n    } else if (\n      lastCallMessage &&\n      (lastIncommingCall.callState === RtcCallState.NONE ||\n        lastIncommingCall.startTime !== lastCallMessage.startTime) && // must be new call\n      lastCallMessage.type === MessageType.Rtc &&\n      lastCallMessage.callState === RtcCallState.DIALING\n    ) {\n      // if receiving call\n      incomingCall();\n    } else if (\n      dialed &&\n      !peerAnswered &&\n      lastCallMessage &&\n      lastCallMessage.startTime === currentCall.startTime &&\n      lastCallMessage.type === MessageType.Rtc &&\n      lastCallMessage.callState === RtcCallState.OUTGOING_CALL_CONNECTED\n    ) {\n      // if peer accepted call\n      outgoingCallAccepted();\n    } else if (\n      (currentCall.callState === RtcCallState.OUTGOING_CALL_CONNECTED ||\n        currentCall.callState === RtcCallState.INCOMING_CALL_CONNECTED) &&\n      lastCallMessage &&\n      lastCallMessage.startTime === currentCall.startTime &&\n      lastCallMessage.type === MessageType.Rtc &&\n      (lastCallMessage.callState === RtcCallState.OUTGOING_CALL_COMPLETED ||\n        lastCallMessage.callState === RtcCallState.INCOMING_CALL_COMPLETED)\n    ) {\n      // if peer ended call\n      callEnded(lastCallMessage.callState, new Date().getTime());\n    }\n  });\n\n  const closeMedia = () => {\n    disableMedia();\n    dispatch(rtcViewHidden());\n    setDialed(false);\n    setAnswered(false);\n    setPeerAnswered(false);\n    setVideo(true);\n    setAudio(true);\n  };\n\n  const endCall = () => {\n    console.log(\"end call\");\n\n    console.log(\"end call: sending end\", currentCall.peerUserId);\n\n    dispatch(\n      sendPubnubMessage({\n        channel: currentCall.peerUserId,\n        sendByPost: true,\n        message: {\n          type: MessageType.Rtc,\n          callState: dialed\n            ? RtcCallState.INCOMING_CALL_COMPLETED\n            : RtcCallState.OUTGOING_CALL_COMPLETED,\n          startTime: currentCall.startTime,\n          senderId: myId\n        }\n      })\n    );\n\n    dispatch(\n      callCompleted(\n        dialed\n          ? RtcCallState.OUTGOING_CALL_COMPLETED\n          : RtcCallState.INCOMING_CALL_COMPLETED,\n        new Date().getTime()\n      )\n    );\n\n    closeMedia();\n  };\n\n  const isDialing = () => {\n    return currentCall.callState === RtcCallState.DIALING;\n  };\n\n  const isIncommingCall = () => {\n    return (\n      !isDialing() &&\n      currentCall.callState !== RtcCallState.OUTGOING_CALL_CONNECTED &&\n      currentCall.callState !== RtcCallState.INCOMING_CALL_CONNECTED &&\n      lastIncommingCall.callState === RtcCallState.RECEIVING_CALL\n    );\n  };\n\n  const isCallCompleted = () => {\n    return (\n      lastIncommingCall.callState !== RtcCallState.RECEIVING_CALL &&\n      (currentCall.callState === RtcCallState.OUTGOING_CALL_COMPLETED ||\n        currentCall.callState === RtcCallState.INCOMING_CALL_COMPLETED)\n    );\n  };\n\n  return (\n    <Wrapper displayed={views.Rtc}>\n      <Header>\n        <Title>Call</Title>\n        <CloseButton\n          onClick={() => {\n            closeMedia();\n          }}\n        >\n          <CrossIcon color={theme.colors.normalText} title=\"close\" />\n        </CloseButton>\n      </Header>\n      <Body>\n        <button onClick={toggleVideo}>Video ({video ? \"on\" : \"off\"})</button>\n        <button onClick={toggleAudio}>Audio ({audio ? \"on\" : \"off\"})</button>\n        {(currentCall.callState === RtcCallState.OUTGOING_CALL_CONNECTED ||\n          currentCall.callState === RtcCallState.INCOMING_CALL_CONNECTED) && (\n          <button onClick={endCall}>Connected (click to end call)</button>\n        )}\n        <VideoWrapper>\n          {isDialing() && <div>Dialing ...</div>}\n          {isIncommingCall() && (\n            <div>\n              Receiving Call ...\n              <button onClick={answerCall}>Answer</button>\n            </div>\n          )}\n          {isCallCompleted() && <div>Call Completed</div>}\n          <div>RemoteVideo</div>\n          <video id=\"remotevideo\" autoPlay={true} playsInline={true}></video>\n          <audio id=\"remoteaudio\" autoPlay={true}></audio>\n          <div>LocalVideo</div>\n          <video\n            style={{ width: \"25%\" }}\n            id=\"myvideo\"\n            autoPlay={true}\n            playsInline={true}\n          ></video>\n        </VideoWrapper>\n      </Body>\n    </Wrapper>\n  );\n};\n\nexport { RtcDisplay };\n","import React from \"react\";\nimport { Wrapper } from \"./ChatUI.style\";\nimport { Menu } from \"features/chat/Menu/Menu\";\nimport { CurrentConversation } from \"features/currentConversation/CurrentConversation/CurrentConversation\";\nimport { ConversationMembers } from \"features/conversationMembers/ConversationMembers/ConversationMembers\";\nimport { JoinConversationDialog } from \"features/joinedConversations/JoinConversationDialog/JoinConversationDialog\";\nimport { UserDetailDialog } from \"features/userDetail/UserDetailDialog/UserDetailDialog\";\nimport { RtcDisplay } from \"features/rtc/RtcDisplay/RtcDisplay\";\n\nconst ChatUI = () => {\n  return (\n    <Wrapper>\n      <Menu />\n      <CurrentConversation />\n      <ConversationMembers />\n      <JoinConversationDialog />\n      <UserDetailDialog />\n      <RtcDisplay></RtcDisplay>\n    </Wrapper>\n  );\n};\n\nexport { ChatUI };\n","type PubNubConfigurationObject = {\n  publishKey: string;\n  subscribeKey: string;\n};\n\nconst isPubNubConfigured = (keyConfiguration: PubNubConfigurationObject) =>\n  keyConfiguration.publishKey.length !== 0 &&\n  keyConfiguration.subscribeKey.length !== 0;\n\nexport default isPubNubConfigured;\n","import styled from \"styled-components/macro\";\n\nexport const ErrorBanner = styled.div`\n  text-align: center;\n  justify-content: center;\n  display: flex;\n  padding: ${({ theme }) => theme.space[3]};\n  background-color: ${({ theme }) => theme.colors.error};\n  color: ${({ theme }) => theme.colors.activeText};\n`;\n","import React from \"react\";\n\nimport { Wrapper } from \"./style\";\nimport { Login } from \"features/authentication/Login/Login\";\nimport { ChatUI } from \"features/chat/Chat\";\nimport { isUserLoggedIn } from \"features/authentication/authenticationModel\";\nimport { useSelector } from \"react-redux\";\nimport keyConfiguration from \"config/pubnub-keys.json\";\nimport isPubNubConfigured from \"foundations/utilities/isPubNubConfigured\";\nimport { ErrorBanner } from \"main/styles/ErrorBanner.style\";\n\nconst ErrorBannerComponent = (\n  <ErrorBanner>\n    <div>\n      Please run <pre>npm setup</pre>\n    </div>\n  </ErrorBanner>\n);\n\nexport const ApplicationRouter = () => {\n  const loggedIn = useSelector(isUserLoggedIn);\n  const view = loggedIn ? <ChatUI /> : <Login />;\n  return (\n    <Wrapper>\n      {!isPubNubConfigured(keyConfiguration) && ErrorBannerComponent}\n      {view}\n    </Wrapper>\n  );\n};\n","// theme based on the system-ui specification https://github.com/system-ui/theme-specification\n\n/* breakpoints */\nconst breakpoints = [\"600px\", \"1200px\"] as const;\nconst mediaQueries = {\n  medium: `@media screen and (min-width: ${breakpoints[0]})`,\n  large: `@media screen and (min-width: ${breakpoints[1]})`,\n  touch: `@media (hover: none)`\n} as const;\nconst fonts = {\n  app: '\"Roboto\", sans-serif'\n} as const;\n/* fonts */\nconst fontSizes = [\"0px\", \"11px\", \"13px\", \"15px\", \"20px\", \"16px\"] as const;\nconst fontSizesAliases = {\n  none: fontSizes[0],\n  small: fontSizes[1],\n  regular: fontSizes[2],\n  medium: fontSizes[3],\n  large: fontSizes[4],\n  messageTextInput: fontSizes[5] // stop ios from zooming by setting font size to 16\n};\nconst fontWeights = [0, 300, 400, 500, 700, 900] as const;\nconst fontWeightsAliases = {\n  none: fontWeights[0],\n  light: fontWeights[1],\n  regular: fontWeights[2],\n  medium: fontWeights[3],\n  bold: fontWeights[4],\n  black: fontWeights[5]\n};\n/* colors */\nconst colors = {\n  error: \"#B63133\",\n  success: \"#62E905\",\n  inactive: \"#F5A623\",\n  primary: [\"#8E2DE2\", \"#4A00E0\"],\n  neutral: [\"#FFFFFF\", \"#F8F6FD\", \"#F1EDFD\", \"#9B9B9B\", \"#585858\"],\n  avatars: [\"#F7861C\", \"#35B7DF\", \"#DE2440\", \"#1F68EF\", \"#9F34C3\"]\n} as const;\nconst colorAliases = {\n  onPrimary: colors.neutral[0],\n  selectedText: \"rgba(0, 0, 0, 0.5)\",\n  active: colors.primary[0],\n  activeText: colors.neutral[0],\n  messageText: colors.neutral[4],\n  normalText: colors.neutral[3],\n  importantText: colors.neutral[4],\n  avatarText: colors.neutral[0],\n  borderLight: colors.neutral[2],\n  borderDark: colors.neutral[3]\n} as const;\n// backgrounds can be colors or gradients\nconst backgrounds = {\n  primary: `linear-gradient(180deg, ${colors.primary[0]} 0%, ${colors.primary[1]} 100%)`,\n  primaryHover: \"rgba(255, 255, 255, 0.1)\",\n  primaryActive: \"rgba(0, 0, 0, 0.1)\",\n  panel: colors.neutral[0],\n  panelHover: colors.neutral[1],\n  content: colors.neutral[1],\n  contentHover: colors.neutral[2],\n  message: colors.neutral[0]\n};\n/* space and sizes */\nconst sizes = [\"0\", \"36px\", \"56px\", \"85px\", \"260px\", \"290px\"] as const;\nconst space = [\n  \"0\",\n  \"10px\",\n  \"12px\",\n  \"14px\",\n  \"16px\",\n  \"21px\",\n  \"24px\",\n  \"32px\",\n  \"40px\"\n] as const;\n/* borders */\nconst radii = [\"0\", \"5px\", \"10px\", \"100vmax\"] as const;\nconst radiiAliases = {\n  square: radii[0],\n  light: radii[1],\n  messageEditor: radii[1],\n  medium: radii[2],\n  strong: radii[2],\n  round: radii[3]\n};\nconst borderWidths = [\"0\", \"1px\", \"5px\"] as const;\nconst borderStyles = [\"solid\"] as const;\nconst borders = [\n  \"none\",\n  `${borderWidths[1]} ${borderStyles[0]}`,\n  `${borderWidths[2]} ${borderStyles[0]}`\n] as const;\nconst bordersAliases = {\n  none: borders[0],\n  light: borders[1],\n  strong: borders[2]\n};\n/* other */\nconst shadows = [\n  \"0 6px 10px rgba(103, 19, 176, 0.06)\",\n  \"0 4px 30px rgba(0, 0, 0, 0.4)\"\n] as const;\nconst custom = {\n  dark: false,\n  companyName: \"PubNub\",\n  tagLine: \"World-Class APIs for In-App Chat\"\n} as const;\n\nexport const appTheme = {\n  breakpoints,\n  mediaQueries,\n  fonts,\n  fontSizes: { ...fontSizes, ...fontSizesAliases },\n  fontWeights: { ...fontWeights, ...fontWeightsAliases },\n  colors: { ...colors, ...colorAliases },\n  backgrounds,\n  sizes,\n  space,\n  radii: { ...radii, ...radiiAliases },\n  borderWidths,\n  borderStyles,\n  borders: { ...borders, ...bordersAliases },\n  shadows,\n  custom\n};\n\nexport type Theme = typeof appTheme;\n","import { createNetworkStatusReducer } from \"pubnub-redux\";\n\n/**\n * Create a reducer to hold the current online status of the user\n */\n\nconst NetworkStatusReducer = createNetworkStatusReducer(false);\nexport { NetworkStatusReducer };\n","import { combineReducers } from \"redux\";\n\nimport { currentConversationStateReducer } from \"features/currentConversation/currentConversationModel\";\nimport { LayoutStateReducer } from \"features/layout/LayoutReducer\";\nimport { UsersReducer } from \"features/users/userModel\";\nimport { AuthenticationStateReducer } from \"features/authentication/authenticationModel\";\nimport { MessageStateReducer } from \"features/messages/messageModel\";\nimport { TypingIndicatorStateReducer } from \"features/typingIndicator/typingIndicatorModel\";\nimport { conversationStateReducer } from \"features/conversations/conversationModel\";\nimport { JoinedConversationsStateReducer } from \"features/joinedConversations/joinedConversationModel\";\nimport { ConversationDraftStateReducer } from \"features/joinedConversations/DraftsModel\";\nimport { ConversationMembersStateReducer } from \"features/conversationMembers/conversationMemberModel\";\nimport { NetworkStatusReducer } from \"features/currentUser/networkStatusModel\";\nimport { MemberPresenceReducer } from \"features/memberPresence/memberPresenceModel\";\nimport { UserDetailStateReducer } from \"features/userDetail/userDetailModel\";\nimport { RtcStateReducer } from \"features/rtc/RtcModel\";\n\n/**\n * Combine all of the reducers in this application\n */\nconst rootReducer = combineReducers({\n  layout: LayoutStateReducer,\n  networkStatus: NetworkStatusReducer,\n  users: UsersReducer,\n  conversations: conversationStateReducer,\n  joinedConversations: JoinedConversationsStateReducer,\n  drafts: ConversationDraftStateReducer,\n  conversationMembers: ConversationMembersStateReducer,\n  memberPresence: MemberPresenceReducer,\n  messages: MessageStateReducer,\n  typingIndicators: TypingIndicatorStateReducer,\n  authentication: AuthenticationStateReducer,\n  currentConversation: currentConversationStateReducer,\n  userDetail: UserDetailStateReducer,\n  rtc: RtcStateReducer\n});\n\nexport default rootReducer;\n\n/**\n * RootState describes the shape of the global Redux store in this application\n */\nexport type RootState = Readonly<ReturnType<typeof rootReducer>>;\n","// Define built-in bootstrap data for this application\nconst preloadedState = {};\n\nexport default preloadedState;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\nimport { AppStore, AppThunkContext } from \"./storeTypes\";\nimport preloadedState from \"./preloadedState\";\n\n// Setup Redux Dev Tools\nexport const composeEnhancers =\n  (process.env.NODE_ENV === \"development\" &&\n    window &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\n// Note: we do not attempt to make the proper types by passing\n// types to the parameters of createStore.  The type definitions there are tricky\n// to work with and possibly buggy as of Redux 4.0.4.\n// Instead, we create a definition of the final store we want and declare the\n// CreateAppStore to return that type of store.\n\n/**\n * Create a redux store configured for this application\n */\nexport const createAppStore = (thunkContext: AppThunkContext): AppStore => {\n  const storeEnhancer = composeEnhancers(\n    applyMiddleware(ReduxThunk.withExtraArgument(thunkContext))\n  );\n\n  return createStore(rootReducer, preloadedState, storeEnhancer);\n};\n","import React, { useEffect } from \"react\";\nimport GlobalStyles from \"main/styles/GlobalStyles\";\nimport Normalize from \"main/styles/Normalize\";\nimport { ApplicationRouter } from \"./Router\";\nimport { appTheme } from \"./Theme\";\nimport Pubnub from \"pubnub\";\nimport { createPubNubListener } from \"pubnub-redux\";\nimport { PubNubProvider } from \"pubnub-react\";\nimport { Provider } from \"react-redux\";\nimport { createAppStore } from \"main/store\";\nimport keyConfiguration from \"config/pubnub-keys.json\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createTypingIndicatorsListener } from \"features/typingIndicator/typingIndicatorModel\";\n\nconst pubnubConfig = Object.assign(\n  {},\n  {\n    // Ensure that subscriptions will be retained if the network connection is lost\n    restore: true,\n    heartbeatInterval: 0\n  },\n  keyConfiguration\n);\nconst pubnub = new Pubnub(pubnubConfig);\n\nconst store = createAppStore({\n  pubnub: {\n    api: pubnub\n  }\n});\n\nconst leaveApplication = () => {\n  // This is required to show the current user leave immediately rather than\n  // wating for the timeout period\n  pubnub.unsubscribeAll();\n};\n\nconst App = () => {\n  useEffect(() => {\n    // Start listening for messages and events from PubNub\n    pubnub.addListener(createPubNubListener(store.dispatch));\n    pubnub.addListener(createTypingIndicatorsListener(store.dispatch));\n    return leaveApplication;\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", leaveApplication);\n  }, []);\n\n  return (\n    <ThemeProvider theme={appTheme}>\n      <Provider store={store}>\n        <PubNubProvider client={pubnub}>\n          <Normalize />\n          <GlobalStyles />\n          <ApplicationRouter />\n        </PubNubProvider>\n      </Provider>\n    </ThemeProvider>\n  );\n};\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./main/App\";\nimport * as serviceWorker from \"./main/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.fcad69ea.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.85dc561e.svg\";","module.exports = __webpack_public_path__ + \"static/media/screenshot.547f1a66.png\";"],"sourceRoot":""}